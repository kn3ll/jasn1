/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.modules.module1;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Collections;
import java.util.Arrays;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;

import com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ;
import com.beanit.jasn1.compiler.modules.module3.Datezz;
import com.beanit.jasn1.compiler.modules.module3.EmployeeNumberzz;

public class PersonnelRecord implements BerSequenceSet, Serializable {

	private static final long serialVersionUID = 1L;

	public static class Children implements BerSequenceOf, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<ChildInformation> seqOf = null;

		public Children() {
			seqOf = new ArrayList<ChildInformation>();
		}

		public Children(byte[] code) {
			this.code = code;
		}

		public List<ChildInformation> getChildInformation() {
			if (seqOf == null) {
				seqOf = new ArrayList<ChildInformation>();
			}
			return seqOf;
		}

		public List<? extends BerType> getSeqOf() {
			return seqOf;
		}
		public Class<? extends BerType> getSeqOfElementClass() {
			return ChildInformation.class;
		}
		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			if (length.val == -1) {
				while (true) {
					subCodeLength += berTag.decode(is);

					if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}

					ChildInformation element = new ChildInformation();
					subCodeLength += element.decode(is, false);
					seqOf.add(element);
				}
			}
			while (subCodeLength < totalLength) {
				ChildInformation element = new ChildInformation();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ChildInformation> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class EmployeeNumberZ implements BerChoice, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ employeeNumberZ = null;
		
		public EmployeeNumberZ() {
		}

		public EmployeeNumberZ(byte[] code) {
			this.code = code;
		}

		public void setEmployeeNumberZ(com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ employeeNumberZ) {
			this.employeeNumberZ = employeeNumberZ;
		}

		public com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ getEmployeeNumberZ() {
			return employeeNumberZ;
		}

		private final List<String> FIELDS = Collections.unmodifiableList(Arrays.asList(
			"employeeNumber-z"
		));
		public List<String> getFields() {
			return FIELDS;
		}
		public BerType getField(String fieldName) {
			switch(fieldName) {
				case "employeeNumber-z":
					return employeeNumberZ;
				default:
					return null;
			}
		}
		public Class<? extends BerType> getFieldClass(String fieldName) {
			switch(fieldName) {
				case "employeeNumber-z":
					return com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ.class;
				default:
					return null;
			}
		}
		public void setField(String fieldName, BerType value) {
			switch(fieldName) {
				case "employeeNumber-z":
					employeeNumberZ = (com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ) value;
					break;
				default:
					throw new IllegalArgumentException("Unknown field " + fieldName);
			}
		}
		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (employeeNumberZ != null) {
				codeLength += employeeNumberZ.encode(reverseOS, true);
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ.tag)) {
				employeeNumberZ = new com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ();
				codeLength += employeeNumberZ.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (employeeNumberZ != null) {
				sb.append("employeeNumberZ: ").append(employeeNumberZ);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class TestSequenceOf2 implements BerSequenceOf, Serializable {

		private static final long serialVersionUID = 1L;

		public static class SEQUENCE implements BerSequenceSet, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerInteger test1 = null;
			private BerInteger test2 = null;
			
			public SEQUENCE() {
			}

			public SEQUENCE(byte[] code) {
				this.code = code;
			}

			public void setTest1(BerInteger test1) {
				this.test1 = test1;
			}

			public BerInteger getTest1() {
				return test1;
			}

			public void setTest2(BerInteger test2) {
				this.test2 = test2;
			}

			public BerInteger getTest2() {
				return test2;
			}

			private final List<String> FIELDS = Collections.unmodifiableList(Arrays.asList(
				"test1",
				"test2"
			));
			public List<String> getFields() {
				return FIELDS;
			}
			public BerType getField(String fieldName) {
				switch(fieldName) {
					case "test1":
						return test1;
					case "test2":
						return test2;
					default:
						return null;
				}
			}
			public Class<? extends BerType> getFieldClass(String fieldName) {
				switch(fieldName) {
					case "test1":
						return BerInteger.class;
					case "test2":
						return BerInteger.class;
					default:
						return null;
				}
			}
			public void setField(String fieldName, BerType value) {
				switch(fieldName) {
					case "test1":
						test1 = (BerInteger) value;
						break;
					case "test2":
						test2 = (BerInteger) value;
						break;
					default:
						throw new IllegalArgumentException("Unknown field " + fieldName);
				}
			}
			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += test2.encode(reverseOS, true);
				
				codeLength += test1.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				if (totalLength == -1) {
					subCodeLength += berTag.decode(is);

					if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}
					if (berTag.equals(BerInteger.tag)) {
						test1 = new BerInteger();
						subCodeLength += test1.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}
					if (berTag.equals(BerInteger.tag)) {
						test2 = new BerInteger();
						subCodeLength += test2.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					int nextByte = is.read();
					if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0
					|| nextByte != 0) {
						if (nextByte == -1) {
							throw new EOFException("Unexpected end of input stream.");
						}
						throw new IOException("Decoded sequence has wrong end of contents octets");
					}
					codeLength += subCodeLength + 1;
					return codeLength;
				}

				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerInteger.tag)) {
					test1 = new BerInteger();
					subCodeLength += test1.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerInteger.tag)) {
					test2 = new BerInteger();
					subCodeLength += test2.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (test1 != null) {
					sb.append("test1: ").append(test1);
				}
				else {
					sb.append("test1: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (test2 != null) {
					sb.append("test2: ").append(test2);
				}
				else {
					sb.append("test2: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<SEQUENCE> seqOf = null;

		public TestSequenceOf2() {
			seqOf = new ArrayList<SEQUENCE>();
		}

		public TestSequenceOf2(byte[] code) {
			this.code = code;
		}

		public List<SEQUENCE> getSEQUENCE() {
			if (seqOf == null) {
				seqOf = new ArrayList<SEQUENCE>();
			}
			return seqOf;
		}

		public List<? extends BerType> getSeqOf() {
			return seqOf;
		}
		public Class<? extends BerType> getSeqOfElementClass() {
			return SEQUENCE.class;
		}
		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			if (length.val == -1) {
				while (true) {
					subCodeLength += berTag.decode(is);

					if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}

					SEQUENCE element = new SEQUENCE();
					subCodeLength += element.decode(is, false);
					seqOf.add(element);
				}
			}
			while (subCodeLength < totalLength) {
				SEQUENCE element = new SEQUENCE();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<SEQUENCE> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 0);

	public byte[] code = null;
	private Name name = null;
	private BerVisibleString title = null;
	private com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ number = null;
	private Date dateOfHire = null;
	private Name nameOfSpouse = null;
	private Children children = null;
	private MyBitString testBitString = null;
	private MyInt test = null;
	private TestChoice test2 = null;
	private TestChoice test3 = null;
	private TestChoice test4 = null;
	private TestChoice test5 = null;
	private TestChoice test6 = null;
	private EmployeeNumberZ employeeNumberZ = null;
	private BerVisibleString code_ = null;
	private TestSequenceOf testSequenceOf = null;
	private TestSequenceOf2 testSequenceOf2 = null;
	private BerEmbeddedPdv embeddedPdv = null;
	
	public PersonnelRecord() {
	}

	public PersonnelRecord(byte[] code) {
		this.code = code;
	}

	public void setName(Name name) {
		this.name = name;
	}

	public Name getName() {
		return name;
	}

	public void setTitle(BerVisibleString title) {
		this.title = title;
	}

	public BerVisibleString getTitle() {
		return title;
	}

	public void setNumber(com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ number) {
		this.number = number;
	}

	public com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ getNumber() {
		return number;
	}

	public void setDateOfHire(Date dateOfHire) {
		this.dateOfHire = dateOfHire;
	}

	public Date getDateOfHire() {
		return dateOfHire;
	}

	public void setNameOfSpouse(Name nameOfSpouse) {
		this.nameOfSpouse = nameOfSpouse;
	}

	public Name getNameOfSpouse() {
		return nameOfSpouse;
	}

	public void setChildren(Children children) {
		this.children = children;
	}

	public Children getChildren() {
		return children;
	}

	public void setTestBitString(MyBitString testBitString) {
		this.testBitString = testBitString;
	}

	public MyBitString getTestBitString() {
		return testBitString;
	}

	public void setTest(MyInt test) {
		this.test = test;
	}

	public MyInt getTest() {
		return test;
	}

	public void setTest2(TestChoice test2) {
		this.test2 = test2;
	}

	public TestChoice getTest2() {
		return test2;
	}

	public void setTest3(TestChoice test3) {
		this.test3 = test3;
	}

	public TestChoice getTest3() {
		return test3;
	}

	public void setTest4(TestChoice test4) {
		this.test4 = test4;
	}

	public TestChoice getTest4() {
		return test4;
	}

	public void setTest5(TestChoice test5) {
		this.test5 = test5;
	}

	public TestChoice getTest5() {
		return test5;
	}

	public void setTest6(TestChoice test6) {
		this.test6 = test6;
	}

	public TestChoice getTest6() {
		return test6;
	}

	public void setEmployeeNumberZ(EmployeeNumberZ employeeNumberZ) {
		this.employeeNumberZ = employeeNumberZ;
	}

	public EmployeeNumberZ getEmployeeNumberZ() {
		return employeeNumberZ;
	}

	public void setCode(BerVisibleString code_) {
		this.code_ = code_;
	}

	public BerVisibleString getCode() {
		return code_;
	}

	public void setTestSequenceOf(TestSequenceOf testSequenceOf) {
		this.testSequenceOf = testSequenceOf;
	}

	public TestSequenceOf getTestSequenceOf() {
		return testSequenceOf;
	}

	public void setTestSequenceOf2(TestSequenceOf2 testSequenceOf2) {
		this.testSequenceOf2 = testSequenceOf2;
	}

	public TestSequenceOf2 getTestSequenceOf2() {
		return testSequenceOf2;
	}

	public void setEmbeddedPdv(BerEmbeddedPdv embeddedPdv) {
		this.embeddedPdv = embeddedPdv;
	}

	public BerEmbeddedPdv getEmbeddedPdv() {
		return embeddedPdv;
	}

	private final List<String> FIELDS = Collections.unmodifiableList(Arrays.asList(
		"name",
		"title",
		"number",
		"dateOfHire",
		"nameOfSpouse",
		"children",
		"testBitString",
		"test",
		"test2",
		"test3",
		"test4",
		"test5",
		"test6",
		"employeeNumber-z",
		"code",
		"testSequenceOf",
		"testSequenceOf2",
		"embeddedPdv"
	));
	public List<String> getFields() {
		return FIELDS;
	}
	public BerType getField(String fieldName) {
		switch(fieldName) {
			case "name":
				return name;
			case "title":
				return title;
			case "number":
				return number;
			case "dateOfHire":
				return dateOfHire;
			case "nameOfSpouse":
				return nameOfSpouse;
			case "children":
				return children;
			case "testBitString":
				return testBitString;
			case "test":
				return test;
			case "test2":
				return test2;
			case "test3":
				return test3;
			case "test4":
				return test4;
			case "test5":
				return test5;
			case "test6":
				return test6;
			case "employeeNumber-z":
				return employeeNumberZ;
			case "code":
				return code_;
			case "testSequenceOf":
				return testSequenceOf;
			case "testSequenceOf2":
				return testSequenceOf2;
			case "embeddedPdv":
				return embeddedPdv;
			default:
				return null;
		}
	}
	public Class<? extends BerType> getFieldClass(String fieldName) {
		switch(fieldName) {
			case "name":
				return Name.class;
			case "title":
				return BerVisibleString.class;
			case "number":
				return com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ.class;
			case "dateOfHire":
				return Date.class;
			case "nameOfSpouse":
				return Name.class;
			case "children":
				return Children.class;
			case "testBitString":
				return MyBitString.class;
			case "test":
				return MyInt.class;
			case "test2":
				return TestChoice.class;
			case "test3":
				return TestChoice.class;
			case "test4":
				return TestChoice.class;
			case "test5":
				return TestChoice.class;
			case "test6":
				return TestChoice.class;
			case "employeeNumber-z":
				return EmployeeNumberZ.class;
			case "code":
				return BerVisibleString.class;
			case "testSequenceOf":
				return TestSequenceOf.class;
			case "testSequenceOf2":
				return TestSequenceOf2.class;
			case "embeddedPdv":
				return BerEmbeddedPdv.class;
			default:
				return null;
		}
	}
	public void setField(String fieldName, BerType value) {
		switch(fieldName) {
			case "name":
				name = (Name) value;
				break;
			case "title":
				title = (BerVisibleString) value;
				break;
			case "number":
				number = (com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ) value;
				break;
			case "dateOfHire":
				dateOfHire = (Date) value;
				break;
			case "nameOfSpouse":
				nameOfSpouse = (Name) value;
				break;
			case "children":
				children = (Children) value;
				break;
			case "testBitString":
				testBitString = (MyBitString) value;
				break;
			case "test":
				test = (MyInt) value;
				break;
			case "test2":
				test2 = (TestChoice) value;
				break;
			case "test3":
				test3 = (TestChoice) value;
				break;
			case "test4":
				test4 = (TestChoice) value;
				break;
			case "test5":
				test5 = (TestChoice) value;
				break;
			case "test6":
				test6 = (TestChoice) value;
				break;
			case "employeeNumber-z":
				employeeNumberZ = (EmployeeNumberZ) value;
				break;
			case "code":
				code_ = (BerVisibleString) value;
				break;
			case "testSequenceOf":
				testSequenceOf = (TestSequenceOf) value;
				break;
			case "testSequenceOf2":
				testSequenceOf2 = (TestSequenceOf2) value;
				break;
			case "embeddedPdv":
				embeddedPdv = (BerEmbeddedPdv) value;
				break;
			default:
				throw new IllegalArgumentException("Unknown field " + fieldName);
		}
	}
	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		codeLength += embeddedPdv.encode(reverseOS, true);
		
		codeLength += testSequenceOf2.encode(reverseOS, true);
		
		codeLength += testSequenceOf.encode(reverseOS, true);
		
		codeLength += code_.encode(reverseOS, true);
		
		if (employeeNumberZ != null) {
			codeLength += employeeNumberZ.encode(reverseOS);
		}
		
		sublength = test6.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
		reverseOS.write(0xAA);
		codeLength += 1;
		
		sublength = test5.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
		reverseOS.write(0xA9);
		codeLength += 1;
		
		if (test4 != null) {
			sublength = test4.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			reverseOS.write(0xA8);
			codeLength += 1;
		}
		
		codeLength += test3.encode(reverseOS);
		
		if (test2 != null) {
			codeLength += test2.encode(reverseOS);
		}
		
		codeLength += test.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 6
		reverseOS.write(0x86);
		codeLength += 1;
		
		codeLength += testBitString.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		if (children != null) {
			codeLength += children.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		codeLength += nameOfSpouse.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
		reverseOS.write(0xA2);
		codeLength += 1;
		
		codeLength += dateOfHire.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += number.encode(reverseOS, true);
		
		codeLength += title.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += name.encode(reverseOS, true);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		if (totalLength == -1) {
			subCodeLength += berTag.decode(is);

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(Name.tag)) {
				name = new Name();
				subCodeLength += name.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				title = new BerVisibleString();
				subCodeLength += title.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ.tag)) {
				number = new com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ();
				subCodeLength += number.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				dateOfHire = new Date();
				subCodeLength += dateOfHire.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				nameOfSpouse = new Name();
				subCodeLength += nameOfSpouse.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
				children = new Children();
				subCodeLength += children.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				testBitString = new MyBitString();
				subCodeLength += testBitString.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				test = new MyInt();
				subCodeLength += test.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			test2 = new TestChoice();
			int choiceDecodeLength = test2.decode(is, berTag);
			if (length.val == -1) {
				int nextByte1 = is.read();
				int nextByte2 = is.read();
				if (nextByte1 != 0 || nextByte2 != 0) {
					throw new IOException("Decoded sequence has wrong end of contents octets. Byte position: " + (subCodeLength + codeLength));
				}
				subCodeLength += 2;
			}
			if (choiceDecodeLength != 0) {
				subCodeLength += choiceDecodeLength;
				subCodeLength += berTag.decode(is);
			}
			else {
				test2 = null;
			}

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			test3 = new TestChoice();
			choiceDecodeLength = test3.decode(is, berTag);
			if (length.val == -1) {
				int nextByte1 = is.read();
				int nextByte2 = is.read();
				if (nextByte1 != 0 || nextByte2 != 0) {
					throw new IOException("Decoded sequence has wrong end of contents octets. Byte position: " + (subCodeLength + codeLength));
				}
				subCodeLength += 2;
			}
			if (choiceDecodeLength != 0) {
				subCodeLength += choiceDecodeLength;
				subCodeLength += berTag.decode(is);
			}
			else {
				test3 = null;
			}

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
				subCodeLength += length.decode(is);
				test4 = new TestChoice();
				choiceDecodeLength = test4.decode(is, null);
				if (length.val == -1) {
					int nextByte1 = is.read();
					int nextByte2 = is.read();
					if (nextByte1 != 0 || nextByte2 != 0) {
						throw new IOException("Decoded sequence has wrong end of contents octets. Byte position: " + (subCodeLength + codeLength));
					}
					subCodeLength += 2;
				}
				if (choiceDecodeLength != 0) {
					subCodeLength += choiceDecodeLength;
					subCodeLength += berTag.decode(is);
				}
				else {
					test4 = null;
				}

			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
				subCodeLength += length.decode(is);
				test5 = new TestChoice();
				choiceDecodeLength = test5.decode(is, null);
				if (length.val == -1) {
					int nextByte1 = is.read();
					int nextByte2 = is.read();
					if (nextByte1 != 0 || nextByte2 != 0) {
						throw new IOException("Decoded sequence has wrong end of contents octets. Byte position: " + (subCodeLength + codeLength));
					}
					subCodeLength += 2;
				}
				if (choiceDecodeLength != 0) {
					subCodeLength += choiceDecodeLength;
					subCodeLength += berTag.decode(is);
				}
				else {
					test5 = null;
				}

			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
				subCodeLength += length.decode(is);
				test6 = new TestChoice();
				choiceDecodeLength = test6.decode(is, null);
				if (length.val == -1) {
					int nextByte1 = is.read();
					int nextByte2 = is.read();
					if (nextByte1 != 0 || nextByte2 != 0) {
						throw new IOException("Decoded sequence has wrong end of contents octets. Byte position: " + (subCodeLength + codeLength));
					}
					subCodeLength += 2;
				}
				if (choiceDecodeLength != 0) {
					subCodeLength += choiceDecodeLength;
					subCodeLength += berTag.decode(is);
				}
				else {
					test6 = null;
				}

			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			employeeNumberZ = new EmployeeNumberZ();
			choiceDecodeLength = employeeNumberZ.decode(is, berTag);
			if (length.val == -1) {
				int nextByte1 = is.read();
				int nextByte2 = is.read();
				if (nextByte1 != 0 || nextByte2 != 0) {
					throw new IOException("Decoded sequence has wrong end of contents octets. Byte position: " + (subCodeLength + codeLength));
				}
				subCodeLength += 2;
			}
			if (choiceDecodeLength != 0) {
				subCodeLength += choiceDecodeLength;
				subCodeLength += berTag.decode(is);
			}
			else {
				employeeNumberZ = null;
			}

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerVisibleString.tag)) {
				code_ = new BerVisibleString();
				subCodeLength += code_.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(TestSequenceOf.tag)) {
				testSequenceOf = new TestSequenceOf();
				subCodeLength += testSequenceOf.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(TestSequenceOf2.tag)) {
				testSequenceOf2 = new TestSequenceOf2();
				subCodeLength += testSequenceOf2.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerEmbeddedPdv.tag)) {
				embeddedPdv = new BerEmbeddedPdv();
				subCodeLength += embeddedPdv.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			int nextByte = is.read();
			if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(Name.tag)) {
			name = new Name();
			subCodeLength += name.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			title = new BerVisibleString();
			subCodeLength += title.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ.tag)) {
			number = new com.beanit.jasn1.compiler.modules.module2.EmployeeNumberZ();
			subCodeLength += number.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			dateOfHire = new Date();
			subCodeLength += dateOfHire.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			nameOfSpouse = new Name();
			subCodeLength += nameOfSpouse.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			children = new Children();
			subCodeLength += children.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			testBitString = new MyBitString();
			subCodeLength += testBitString.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			test = new MyInt();
			subCodeLength += test.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		test2 = new TestChoice();
		int choiceDecodeLength = test2.decode(is, berTag);
		if (choiceDecodeLength != 0) {
			subCodeLength += choiceDecodeLength;
			subCodeLength += berTag.decode(is);
		}
		else {
			test2 = null;
		}
		
		test3 = new TestChoice();
		subCodeLength += test3.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			subCodeLength += length.decode(is);
			test4 = new TestChoice();
			subCodeLength += test4.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			subCodeLength += length.decode(is);
			test5 = new TestChoice();
			subCodeLength += test5.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			subCodeLength += length.decode(is);
			test6 = new TestChoice();
			subCodeLength += test6.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		employeeNumberZ = new EmployeeNumberZ();
		choiceDecodeLength = employeeNumberZ.decode(is, berTag);
		if (choiceDecodeLength != 0) {
			subCodeLength += choiceDecodeLength;
			subCodeLength += berTag.decode(is);
		}
		else {
			employeeNumberZ = null;
		}
		
		if (berTag.equals(BerVisibleString.tag)) {
			code_ = new BerVisibleString();
			subCodeLength += code_.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(TestSequenceOf.tag)) {
			testSequenceOf = new TestSequenceOf();
			subCodeLength += testSequenceOf.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(TestSequenceOf2.tag)) {
			testSequenceOf2 = new TestSequenceOf2();
			subCodeLength += testSequenceOf2.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerEmbeddedPdv.tag)) {
			embeddedPdv = new BerEmbeddedPdv();
			subCodeLength += embeddedPdv.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (name != null) {
			sb.append("name: ");
			name.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("name: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (title != null) {
			sb.append("title: ").append(title);
		}
		else {
			sb.append("title: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (number != null) {
			sb.append("number: ").append(number);
		}
		else {
			sb.append("number: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (dateOfHire != null) {
			sb.append("dateOfHire: ").append(dateOfHire);
		}
		else {
			sb.append("dateOfHire: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (nameOfSpouse != null) {
			sb.append("nameOfSpouse: ");
			nameOfSpouse.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("nameOfSpouse: <empty-required-field>");
		}
		
		if (children != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("children: ");
			children.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (testBitString != null) {
			sb.append("testBitString: ").append(testBitString);
		}
		else {
			sb.append("testBitString: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (test != null) {
			sb.append("test: ").append(test);
		}
		else {
			sb.append("test: <empty-required-field>");
		}
		
		if (test2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("test2: ");
			test2.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (test3 != null) {
			sb.append("test3: ");
			test3.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("test3: <empty-required-field>");
		}
		
		if (test4 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("test4: ");
			test4.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (test5 != null) {
			sb.append("test5: ");
			test5.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("test5: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (test6 != null) {
			sb.append("test6: ");
			test6.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("test6: <empty-required-field>");
		}
		
		if (employeeNumberZ != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("employeeNumberZ: ");
			employeeNumberZ.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (code_ != null) {
			sb.append("code_: ").append(code_);
		}
		else {
			sb.append("code_: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (testSequenceOf != null) {
			sb.append("testSequenceOf: ");
			testSequenceOf.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("testSequenceOf: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (testSequenceOf2 != null) {
			sb.append("testSequenceOf2: ");
			testSequenceOf2.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("testSequenceOf2: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (embeddedPdv != null) {
			sb.append("embeddedPdv: ");
			embeddedPdv.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("embeddedPdv: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

