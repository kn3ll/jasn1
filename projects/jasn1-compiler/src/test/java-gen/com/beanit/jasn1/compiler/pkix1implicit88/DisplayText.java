/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.pkix1implicit88;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Collections;
import java.util.Arrays;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;

import com.beanit.jasn1.compiler.pkix1explicit88.Attribute;
import com.beanit.jasn1.compiler.pkix1explicit88.CertificateSerialNumber;
import com.beanit.jasn1.compiler.pkix1explicit88.DirectoryString;
import com.beanit.jasn1.compiler.pkix1explicit88.Name;
import com.beanit.jasn1.compiler.pkix1explicit88.ORAddress;
import com.beanit.jasn1.compiler.pkix1explicit88.RelativeDistinguishedName;

public class DisplayText implements BerChoice, Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	public BerIA5String ia5String = null;
	public BerVisibleString visibleString = null;
	public BerBMPString bmpString = null;
	public BerUTF8String utf8String = null;
	
	public DisplayText() {
	}

	public DisplayText(byte[] code) {
		this.code = code;
	}

	public DisplayText(BerIA5String ia5String, BerVisibleString visibleString, BerBMPString bmpString, BerUTF8String utf8String) {
		this.ia5String = ia5String;
		this.visibleString = visibleString;
		this.bmpString = bmpString;
		this.utf8String = utf8String;
	}

	private final transient List<String> FIELDS = Collections.unmodifiableList(Arrays.asList(
		"ia5String",
		"visibleString",
		"bmpString",
		"utf8String"
	));
	public List<String> getFields() {
		return FIELDS;
	}
	public BerType getField(String fieldName) {
		switch(fieldName) {
			case "ia5String":
				return ia5String;
			case "visibleString":
				return visibleString;
			case "bmpString":
				return bmpString;
			case "utf8String":
				return utf8String;
			default:
				return null;
		}
	}
	public Class<? extends BerType> getFieldClass(String fieldName) {
		switch(fieldName) {
			case "ia5String":
				return BerIA5String.class;
			case "visibleString":
				return BerVisibleString.class;
			case "bmpString":
				return BerBMPString.class;
			case "utf8String":
				return BerUTF8String.class;
			default:
				return null;
		}
	}
	public void setField(String fieldName, BerType value) {
		switch(fieldName) {
			case "ia5String":
				ia5String = (BerIA5String) value;
				break;
			case "visibleString":
				visibleString = (BerVisibleString) value;
				break;
			case "bmpString":
				bmpString = (BerBMPString) value;
				break;
			case "utf8String":
				utf8String = (BerUTF8String) value;
				break;
			default:
				throw new IllegalArgumentException("Unknown field " + fieldName);
		}
	}
	public int encode(OutputStream reverseOS) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (utf8String != null) {
			codeLength += utf8String.encode(reverseOS, true);
			return codeLength;
		}
		
		if (bmpString != null) {
			codeLength += bmpString.encode(reverseOS, true);
			return codeLength;
		}
		
		if (visibleString != null) {
			codeLength += visibleString.encode(reverseOS, true);
			return codeLength;
		}
		
		if (ia5String != null) {
			codeLength += ia5String.encode(reverseOS, true);
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerIA5String.tag)) {
			ia5String = new BerIA5String();
			codeLength += ia5String.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerVisibleString.tag)) {
			visibleString = new BerVisibleString();
			codeLength += visibleString.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerBMPString.tag)) {
			bmpString = new BerBMPString();
			codeLength += bmpString.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerUTF8String.tag)) {
			utf8String = new BerUTF8String();
			codeLength += utf8String.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (ia5String != null) {
			sb.append("ia5String: ").append(ia5String);
			return;
		}

		if (visibleString != null) {
			sb.append("visibleString: ").append(visibleString);
			return;
		}

		if (bmpString != null) {
			sb.append("bmpString: ").append(bmpString);
			return;
		}

		if (utf8String != null) {
			sb.append("utf8String: ").append(utf8String);
			return;
		}

		sb.append("<none>");
	}

}

