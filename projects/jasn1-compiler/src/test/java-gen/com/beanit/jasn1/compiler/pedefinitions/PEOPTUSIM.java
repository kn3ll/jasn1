/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Collections;
import java.util.Arrays;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class PEOPTUSIM implements BerSequenceSet, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	public PEHeader optusimHeader = null;
	public BerObjectIdentifier templateID = null;
	public File efLi = null;
	public File efAcmax = null;
	public File efAcm = null;
	public File efGid1 = null;
	public File efGid2 = null;
	public File efMsisdn = null;
	public File efPuct = null;
	public File efCbmi = null;
	public File efCbmid = null;
	public File efSdn = null;
	public File efExt2 = null;
	public File efExt3 = null;
	public File efCbmir = null;
	public File efPlmnwact = null;
	public File efOplmnwact = null;
	public File efHplmnwact = null;
	public File efDck = null;
	public File efCnl = null;
	public File efSmsr = null;
	public File efBdn = null;
	public File efExt5 = null;
	public File efCcp2 = null;
	public File efExt4 = null;
	public File efAcl = null;
	public File efCmi = null;
	public File efIci = null;
	public File efOci = null;
	public File efIct = null;
	public File efOct = null;
	public File efVgcs = null;
	public File efVgcss = null;
	public File efVbs = null;
	public File efVbss = null;
	public File efEmlpp = null;
	public File efAaem = null;
	public File efHiddenkey = null;
	public File efPnn = null;
	public File efOpl = null;
	public File efMbdn = null;
	public File efExt6 = null;
	public File efMbi = null;
	public File efMwis = null;
	public File efCfis = null;
	public File efExt7 = null;
	public File efSpdi = null;
	public File efMmsn = null;
	public File efExt8 = null;
	public File efMmsicp = null;
	public File efMmsup = null;
	public File efMmsucp = null;
	public File efNia = null;
	public File efVgcsca = null;
	public File efVbsca = null;
	public File efGbabp = null;
	public File efMsk = null;
	public File efMuk = null;
	public File efEhplmn = null;
	public File efGbanl = null;
	public File efEhplmnpi = null;
	public File efLrplmnsi = null;
	public File efNafkca = null;
	public File efSpni = null;
	public File efPnni = null;
	public File efNcpIp = null;
	public File efUfc = null;
	public File efNasconfig = null;
	public File efUicciari = null;
	public File efPws = null;
	public File efFdnuri = null;
	public File efBdnuri = null;
	public File efSdnuri = null;
	public File efIwl = null;
	public File efIps = null;
	public File efIpd = null;
	
	public PEOPTUSIM() {
	}

	public PEOPTUSIM(byte[] code) {
		this.code = code;
	}

	public PEOPTUSIM(PEHeader optusimHeader, BerObjectIdentifier templateID, File efLi, File efAcmax, File efAcm, File efGid1, File efGid2, File efMsisdn, File efPuct, File efCbmi, File efCbmid, File efSdn, File efExt2, File efExt3, File efCbmir, File efPlmnwact, File efOplmnwact, File efHplmnwact, File efDck, File efCnl, File efSmsr, File efBdn, File efExt5, File efCcp2, File efExt4, File efAcl, File efCmi, File efIci, File efOci, File efIct, File efOct, File efVgcs, File efVgcss, File efVbs, File efVbss, File efEmlpp, File efAaem, File efHiddenkey, File efPnn, File efOpl, File efMbdn, File efExt6, File efMbi, File efMwis, File efCfis, File efExt7, File efSpdi, File efMmsn, File efExt8, File efMmsicp, File efMmsup, File efMmsucp, File efNia, File efVgcsca, File efVbsca, File efGbabp, File efMsk, File efMuk, File efEhplmn, File efGbanl, File efEhplmnpi, File efLrplmnsi, File efNafkca, File efSpni, File efPnni, File efNcpIp, File efUfc, File efNasconfig, File efUicciari, File efPws, File efFdnuri, File efBdnuri, File efSdnuri, File efIwl, File efIps, File efIpd) {
		this.optusimHeader = optusimHeader;
		this.templateID = templateID;
		this.efLi = efLi;
		this.efAcmax = efAcmax;
		this.efAcm = efAcm;
		this.efGid1 = efGid1;
		this.efGid2 = efGid2;
		this.efMsisdn = efMsisdn;
		this.efPuct = efPuct;
		this.efCbmi = efCbmi;
		this.efCbmid = efCbmid;
		this.efSdn = efSdn;
		this.efExt2 = efExt2;
		this.efExt3 = efExt3;
		this.efCbmir = efCbmir;
		this.efPlmnwact = efPlmnwact;
		this.efOplmnwact = efOplmnwact;
		this.efHplmnwact = efHplmnwact;
		this.efDck = efDck;
		this.efCnl = efCnl;
		this.efSmsr = efSmsr;
		this.efBdn = efBdn;
		this.efExt5 = efExt5;
		this.efCcp2 = efCcp2;
		this.efExt4 = efExt4;
		this.efAcl = efAcl;
		this.efCmi = efCmi;
		this.efIci = efIci;
		this.efOci = efOci;
		this.efIct = efIct;
		this.efOct = efOct;
		this.efVgcs = efVgcs;
		this.efVgcss = efVgcss;
		this.efVbs = efVbs;
		this.efVbss = efVbss;
		this.efEmlpp = efEmlpp;
		this.efAaem = efAaem;
		this.efHiddenkey = efHiddenkey;
		this.efPnn = efPnn;
		this.efOpl = efOpl;
		this.efMbdn = efMbdn;
		this.efExt6 = efExt6;
		this.efMbi = efMbi;
		this.efMwis = efMwis;
		this.efCfis = efCfis;
		this.efExt7 = efExt7;
		this.efSpdi = efSpdi;
		this.efMmsn = efMmsn;
		this.efExt8 = efExt8;
		this.efMmsicp = efMmsicp;
		this.efMmsup = efMmsup;
		this.efMmsucp = efMmsucp;
		this.efNia = efNia;
		this.efVgcsca = efVgcsca;
		this.efVbsca = efVbsca;
		this.efGbabp = efGbabp;
		this.efMsk = efMsk;
		this.efMuk = efMuk;
		this.efEhplmn = efEhplmn;
		this.efGbanl = efGbanl;
		this.efEhplmnpi = efEhplmnpi;
		this.efLrplmnsi = efLrplmnsi;
		this.efNafkca = efNafkca;
		this.efSpni = efSpni;
		this.efPnni = efPnni;
		this.efNcpIp = efNcpIp;
		this.efUfc = efUfc;
		this.efNasconfig = efNasconfig;
		this.efUicciari = efUicciari;
		this.efPws = efPws;
		this.efFdnuri = efFdnuri;
		this.efBdnuri = efBdnuri;
		this.efSdnuri = efSdnuri;
		this.efIwl = efIwl;
		this.efIps = efIps;
		this.efIpd = efIpd;
	}

	private final List<String> FIELDS = Collections.unmodifiableList(Arrays.asList(
	));
	public List<String> getFields() {
		return FIELDS;
	}
	public BerType getField(String fieldName) {
		switch(fieldName) {
			case "optusim-header":
				return optusimHeader;
			case "templateID":
				return templateID;
			case "ef-li":
				return efLi;
			case "ef-acmax":
				return efAcmax;
			case "ef-acm":
				return efAcm;
			case "ef-gid1":
				return efGid1;
			case "ef-gid2":
				return efGid2;
			case "ef-msisdn":
				return efMsisdn;
			case "ef-puct":
				return efPuct;
			case "ef-cbmi":
				return efCbmi;
			case "ef-cbmid":
				return efCbmid;
			case "ef-sdn":
				return efSdn;
			case "ef-ext2":
				return efExt2;
			case "ef-ext3":
				return efExt3;
			case "ef-cbmir":
				return efCbmir;
			case "ef-plmnwact":
				return efPlmnwact;
			case "ef-oplmnwact":
				return efOplmnwact;
			case "ef-hplmnwact":
				return efHplmnwact;
			case "ef-dck":
				return efDck;
			case "ef-cnl":
				return efCnl;
			case "ef-smsr":
				return efSmsr;
			case "ef-bdn":
				return efBdn;
			case "ef-ext5":
				return efExt5;
			case "ef-ccp2":
				return efCcp2;
			case "ef-ext4":
				return efExt4;
			case "ef-acl":
				return efAcl;
			case "ef-cmi":
				return efCmi;
			case "ef-ici":
				return efIci;
			case "ef-oci":
				return efOci;
			case "ef-ict":
				return efIct;
			case "ef-oct":
				return efOct;
			case "ef-vgcs":
				return efVgcs;
			case "ef-vgcss":
				return efVgcss;
			case "ef-vbs":
				return efVbs;
			case "ef-vbss":
				return efVbss;
			case "ef-emlpp":
				return efEmlpp;
			case "ef-aaem":
				return efAaem;
			case "ef-hiddenkey":
				return efHiddenkey;
			case "ef-pnn":
				return efPnn;
			case "ef-opl":
				return efOpl;
			case "ef-mbdn":
				return efMbdn;
			case "ef-ext6":
				return efExt6;
			case "ef-mbi":
				return efMbi;
			case "ef-mwis":
				return efMwis;
			case "ef-cfis":
				return efCfis;
			case "ef-ext7":
				return efExt7;
			case "ef-spdi":
				return efSpdi;
			case "ef-mmsn":
				return efMmsn;
			case "ef-ext8":
				return efExt8;
			case "ef-mmsicp":
				return efMmsicp;
			case "ef-mmsup":
				return efMmsup;
			case "ef-mmsucp":
				return efMmsucp;
			case "ef-nia":
				return efNia;
			case "ef-vgcsca":
				return efVgcsca;
			case "ef-vbsca":
				return efVbsca;
			case "ef-gbabp":
				return efGbabp;
			case "ef-msk":
				return efMsk;
			case "ef-muk":
				return efMuk;
			case "ef-ehplmn":
				return efEhplmn;
			case "ef-gbanl":
				return efGbanl;
			case "ef-ehplmnpi":
				return efEhplmnpi;
			case "ef-lrplmnsi":
				return efLrplmnsi;
			case "ef-nafkca":
				return efNafkca;
			case "ef-spni":
				return efSpni;
			case "ef-pnni":
				return efPnni;
			case "ef-ncp-ip":
				return efNcpIp;
			case "ef-ufc":
				return efUfc;
			case "ef-nasconfig":
				return efNasconfig;
			case "ef-uicciari":
				return efUicciari;
			case "ef-pws":
				return efPws;
			case "ef-fdnuri":
				return efFdnuri;
			case "ef-bdnuri":
				return efBdnuri;
			case "ef-sdnuri":
				return efSdnuri;
			case "ef-iwl":
				return efIwl;
			case "ef-ips":
				return efIps;
			case "ef-ipd":
				return efIpd;
			default:
				return null;
		}
	}
	public Class<? extends BerType> getFieldClass(String fieldName) {
		switch(fieldName) {
			case "optusim-header":
				return PEHeader.class;
			case "templateID":
				return BerObjectIdentifier.class;
			case "ef-li":
				return File.class;
			case "ef-acmax":
				return File.class;
			case "ef-acm":
				return File.class;
			case "ef-gid1":
				return File.class;
			case "ef-gid2":
				return File.class;
			case "ef-msisdn":
				return File.class;
			case "ef-puct":
				return File.class;
			case "ef-cbmi":
				return File.class;
			case "ef-cbmid":
				return File.class;
			case "ef-sdn":
				return File.class;
			case "ef-ext2":
				return File.class;
			case "ef-ext3":
				return File.class;
			case "ef-cbmir":
				return File.class;
			case "ef-plmnwact":
				return File.class;
			case "ef-oplmnwact":
				return File.class;
			case "ef-hplmnwact":
				return File.class;
			case "ef-dck":
				return File.class;
			case "ef-cnl":
				return File.class;
			case "ef-smsr":
				return File.class;
			case "ef-bdn":
				return File.class;
			case "ef-ext5":
				return File.class;
			case "ef-ccp2":
				return File.class;
			case "ef-ext4":
				return File.class;
			case "ef-acl":
				return File.class;
			case "ef-cmi":
				return File.class;
			case "ef-ici":
				return File.class;
			case "ef-oci":
				return File.class;
			case "ef-ict":
				return File.class;
			case "ef-oct":
				return File.class;
			case "ef-vgcs":
				return File.class;
			case "ef-vgcss":
				return File.class;
			case "ef-vbs":
				return File.class;
			case "ef-vbss":
				return File.class;
			case "ef-emlpp":
				return File.class;
			case "ef-aaem":
				return File.class;
			case "ef-hiddenkey":
				return File.class;
			case "ef-pnn":
				return File.class;
			case "ef-opl":
				return File.class;
			case "ef-mbdn":
				return File.class;
			case "ef-ext6":
				return File.class;
			case "ef-mbi":
				return File.class;
			case "ef-mwis":
				return File.class;
			case "ef-cfis":
				return File.class;
			case "ef-ext7":
				return File.class;
			case "ef-spdi":
				return File.class;
			case "ef-mmsn":
				return File.class;
			case "ef-ext8":
				return File.class;
			case "ef-mmsicp":
				return File.class;
			case "ef-mmsup":
				return File.class;
			case "ef-mmsucp":
				return File.class;
			case "ef-nia":
				return File.class;
			case "ef-vgcsca":
				return File.class;
			case "ef-vbsca":
				return File.class;
			case "ef-gbabp":
				return File.class;
			case "ef-msk":
				return File.class;
			case "ef-muk":
				return File.class;
			case "ef-ehplmn":
				return File.class;
			case "ef-gbanl":
				return File.class;
			case "ef-ehplmnpi":
				return File.class;
			case "ef-lrplmnsi":
				return File.class;
			case "ef-nafkca":
				return File.class;
			case "ef-spni":
				return File.class;
			case "ef-pnni":
				return File.class;
			case "ef-ncp-ip":
				return File.class;
			case "ef-ufc":
				return File.class;
			case "ef-nasconfig":
				return File.class;
			case "ef-uicciari":
				return File.class;
			case "ef-pws":
				return File.class;
			case "ef-fdnuri":
				return File.class;
			case "ef-bdnuri":
				return File.class;
			case "ef-sdnuri":
				return File.class;
			case "ef-iwl":
				return File.class;
			case "ef-ips":
				return File.class;
			case "ef-ipd":
				return File.class;
			default:
				return null;
		}
	}
	public void setField(String fieldName, BerType value) {
		switch(fieldName) {
			case "optusim-header":
				optusimHeader = (PEHeader) value;
				break;
			case "templateID":
				templateID = (BerObjectIdentifier) value;
				break;
			case "ef-li":
				efLi = (File) value;
				break;
			case "ef-acmax":
				efAcmax = (File) value;
				break;
			case "ef-acm":
				efAcm = (File) value;
				break;
			case "ef-gid1":
				efGid1 = (File) value;
				break;
			case "ef-gid2":
				efGid2 = (File) value;
				break;
			case "ef-msisdn":
				efMsisdn = (File) value;
				break;
			case "ef-puct":
				efPuct = (File) value;
				break;
			case "ef-cbmi":
				efCbmi = (File) value;
				break;
			case "ef-cbmid":
				efCbmid = (File) value;
				break;
			case "ef-sdn":
				efSdn = (File) value;
				break;
			case "ef-ext2":
				efExt2 = (File) value;
				break;
			case "ef-ext3":
				efExt3 = (File) value;
				break;
			case "ef-cbmir":
				efCbmir = (File) value;
				break;
			case "ef-plmnwact":
				efPlmnwact = (File) value;
				break;
			case "ef-oplmnwact":
				efOplmnwact = (File) value;
				break;
			case "ef-hplmnwact":
				efHplmnwact = (File) value;
				break;
			case "ef-dck":
				efDck = (File) value;
				break;
			case "ef-cnl":
				efCnl = (File) value;
				break;
			case "ef-smsr":
				efSmsr = (File) value;
				break;
			case "ef-bdn":
				efBdn = (File) value;
				break;
			case "ef-ext5":
				efExt5 = (File) value;
				break;
			case "ef-ccp2":
				efCcp2 = (File) value;
				break;
			case "ef-ext4":
				efExt4 = (File) value;
				break;
			case "ef-acl":
				efAcl = (File) value;
				break;
			case "ef-cmi":
				efCmi = (File) value;
				break;
			case "ef-ici":
				efIci = (File) value;
				break;
			case "ef-oci":
				efOci = (File) value;
				break;
			case "ef-ict":
				efIct = (File) value;
				break;
			case "ef-oct":
				efOct = (File) value;
				break;
			case "ef-vgcs":
				efVgcs = (File) value;
				break;
			case "ef-vgcss":
				efVgcss = (File) value;
				break;
			case "ef-vbs":
				efVbs = (File) value;
				break;
			case "ef-vbss":
				efVbss = (File) value;
				break;
			case "ef-emlpp":
				efEmlpp = (File) value;
				break;
			case "ef-aaem":
				efAaem = (File) value;
				break;
			case "ef-hiddenkey":
				efHiddenkey = (File) value;
				break;
			case "ef-pnn":
				efPnn = (File) value;
				break;
			case "ef-opl":
				efOpl = (File) value;
				break;
			case "ef-mbdn":
				efMbdn = (File) value;
				break;
			case "ef-ext6":
				efExt6 = (File) value;
				break;
			case "ef-mbi":
				efMbi = (File) value;
				break;
			case "ef-mwis":
				efMwis = (File) value;
				break;
			case "ef-cfis":
				efCfis = (File) value;
				break;
			case "ef-ext7":
				efExt7 = (File) value;
				break;
			case "ef-spdi":
				efSpdi = (File) value;
				break;
			case "ef-mmsn":
				efMmsn = (File) value;
				break;
			case "ef-ext8":
				efExt8 = (File) value;
				break;
			case "ef-mmsicp":
				efMmsicp = (File) value;
				break;
			case "ef-mmsup":
				efMmsup = (File) value;
				break;
			case "ef-mmsucp":
				efMmsucp = (File) value;
				break;
			case "ef-nia":
				efNia = (File) value;
				break;
			case "ef-vgcsca":
				efVgcsca = (File) value;
				break;
			case "ef-vbsca":
				efVbsca = (File) value;
				break;
			case "ef-gbabp":
				efGbabp = (File) value;
				break;
			case "ef-msk":
				efMsk = (File) value;
				break;
			case "ef-muk":
				efMuk = (File) value;
				break;
			case "ef-ehplmn":
				efEhplmn = (File) value;
				break;
			case "ef-gbanl":
				efGbanl = (File) value;
				break;
			case "ef-ehplmnpi":
				efEhplmnpi = (File) value;
				break;
			case "ef-lrplmnsi":
				efLrplmnsi = (File) value;
				break;
			case "ef-nafkca":
				efNafkca = (File) value;
				break;
			case "ef-spni":
				efSpni = (File) value;
				break;
			case "ef-pnni":
				efPnni = (File) value;
				break;
			case "ef-ncp-ip":
				efNcpIp = (File) value;
				break;
			case "ef-ufc":
				efUfc = (File) value;
				break;
			case "ef-nasconfig":
				efNasconfig = (File) value;
				break;
			case "ef-uicciari":
				efUicciari = (File) value;
				break;
			case "ef-pws":
				efPws = (File) value;
				break;
			case "ef-fdnuri":
				efFdnuri = (File) value;
				break;
			case "ef-bdnuri":
				efBdnuri = (File) value;
				break;
			case "ef-sdnuri":
				efSdnuri = (File) value;
				break;
			case "ef-iwl":
				efIwl = (File) value;
				break;
			case "ef-ips":
				efIps = (File) value;
				break;
			case "ef-ipd":
				efIpd = (File) value;
				break;
			default:
				throw new IllegalArgumentException("Unknown field " + fieldName);
		}
	}
	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (efIpd != null) {
			codeLength += efIpd.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 75
			reverseOS.write(0x4B);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efIps != null) {
			codeLength += efIps.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 74
			reverseOS.write(0x4A);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efIwl != null) {
			codeLength += efIwl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 73
			reverseOS.write(0x49);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efSdnuri != null) {
			codeLength += efSdnuri.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 72
			reverseOS.write(0x48);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efBdnuri != null) {
			codeLength += efBdnuri.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 71
			reverseOS.write(0x47);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efFdnuri != null) {
			codeLength += efFdnuri.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 70
			reverseOS.write(0x46);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efPws != null) {
			codeLength += efPws.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 69
			reverseOS.write(0x45);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efUicciari != null) {
			codeLength += efUicciari.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 68
			reverseOS.write(0x44);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efNasconfig != null) {
			codeLength += efNasconfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 67
			reverseOS.write(0x43);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efUfc != null) {
			codeLength += efUfc.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 66
			reverseOS.write(0x42);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efNcpIp != null) {
			codeLength += efNcpIp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 65
			reverseOS.write(0x41);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efPnni != null) {
			codeLength += efPnni.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 64
			reverseOS.write(0x40);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efSpni != null) {
			codeLength += efSpni.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 63
			reverseOS.write(0x3F);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efNafkca != null) {
			codeLength += efNafkca.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 62
			reverseOS.write(0x3E);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efLrplmnsi != null) {
			codeLength += efLrplmnsi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 61
			reverseOS.write(0x3D);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efEhplmnpi != null) {
			codeLength += efEhplmnpi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 60
			reverseOS.write(0x3C);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efGbanl != null) {
			codeLength += efGbanl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 59
			reverseOS.write(0x3B);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efEhplmn != null) {
			codeLength += efEhplmn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 58
			reverseOS.write(0x3A);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMuk != null) {
			codeLength += efMuk.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 57
			reverseOS.write(0x39);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMsk != null) {
			codeLength += efMsk.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 56
			reverseOS.write(0x38);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efGbabp != null) {
			codeLength += efGbabp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 55
			reverseOS.write(0x37);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efVbsca != null) {
			codeLength += efVbsca.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 54
			reverseOS.write(0x36);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efVgcsca != null) {
			codeLength += efVgcsca.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 53
			reverseOS.write(0x35);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efNia != null) {
			codeLength += efNia.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 52
			reverseOS.write(0x34);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmsucp != null) {
			codeLength += efMmsucp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 51
			reverseOS.write(0x33);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmsup != null) {
			codeLength += efMmsup.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 50
			reverseOS.write(0x32);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmsicp != null) {
			codeLength += efMmsicp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 49
			reverseOS.write(0x31);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efExt8 != null) {
			codeLength += efExt8.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 48
			reverseOS.write(0x30);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmsn != null) {
			codeLength += efMmsn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 47
			reverseOS.write(0x2F);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efSpdi != null) {
			codeLength += efSpdi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 46
			reverseOS.write(0x2E);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efExt7 != null) {
			codeLength += efExt7.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 45
			reverseOS.write(0x2D);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efCfis != null) {
			codeLength += efCfis.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 44
			reverseOS.write(0x2C);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMwis != null) {
			codeLength += efMwis.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 43
			reverseOS.write(0x2B);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMbi != null) {
			codeLength += efMbi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 42
			reverseOS.write(0x2A);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efExt6 != null) {
			codeLength += efExt6.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 41
			reverseOS.write(0x29);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMbdn != null) {
			codeLength += efMbdn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 40
			reverseOS.write(0x28);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efOpl != null) {
			codeLength += efOpl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 39
			reverseOS.write(0x27);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efPnn != null) {
			codeLength += efPnn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 38
			reverseOS.write(0x26);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efHiddenkey != null) {
			codeLength += efHiddenkey.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 37
			reverseOS.write(0x25);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efAaem != null) {
			codeLength += efAaem.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 36
			reverseOS.write(0x24);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efEmlpp != null) {
			codeLength += efEmlpp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 35
			reverseOS.write(0x23);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efVbss != null) {
			codeLength += efVbss.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 34
			reverseOS.write(0x22);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efVbs != null) {
			codeLength += efVbs.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 33
			reverseOS.write(0x21);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efVgcss != null) {
			codeLength += efVgcss.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 32
			reverseOS.write(0x20);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efVgcs != null) {
			codeLength += efVgcs.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 31
			reverseOS.write(0x1F);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efOct != null) {
			codeLength += efOct.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 30
			reverseOS.write(0xBE);
			codeLength += 1;
		}
		
		if (efIct != null) {
			codeLength += efIct.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 29
			reverseOS.write(0xBD);
			codeLength += 1;
		}
		
		if (efOci != null) {
			codeLength += efOci.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 28
			reverseOS.write(0xBC);
			codeLength += 1;
		}
		
		if (efIci != null) {
			codeLength += efIci.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 27
			reverseOS.write(0xBB);
			codeLength += 1;
		}
		
		if (efCmi != null) {
			codeLength += efCmi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 26
			reverseOS.write(0xBA);
			codeLength += 1;
		}
		
		if (efAcl != null) {
			codeLength += efAcl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 25
			reverseOS.write(0xB9);
			codeLength += 1;
		}
		
		if (efExt4 != null) {
			codeLength += efExt4.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 24
			reverseOS.write(0xB8);
			codeLength += 1;
		}
		
		if (efCcp2 != null) {
			codeLength += efCcp2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 23
			reverseOS.write(0xB7);
			codeLength += 1;
		}
		
		if (efExt5 != null) {
			codeLength += efExt5.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 22
			reverseOS.write(0xB6);
			codeLength += 1;
		}
		
		if (efBdn != null) {
			codeLength += efBdn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 21
			reverseOS.write(0xB5);
			codeLength += 1;
		}
		
		if (efSmsr != null) {
			codeLength += efSmsr.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
			reverseOS.write(0xB4);
			codeLength += 1;
		}
		
		if (efCnl != null) {
			codeLength += efCnl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
			reverseOS.write(0xB3);
			codeLength += 1;
		}
		
		if (efDck != null) {
			codeLength += efDck.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 18
			reverseOS.write(0xB2);
			codeLength += 1;
		}
		
		if (efHplmnwact != null) {
			codeLength += efHplmnwact.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
			reverseOS.write(0xB1);
			codeLength += 1;
		}
		
		if (efOplmnwact != null) {
			codeLength += efOplmnwact.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
			reverseOS.write(0xB0);
			codeLength += 1;
		}
		
		if (efPlmnwact != null) {
			codeLength += efPlmnwact.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
			reverseOS.write(0xAF);
			codeLength += 1;
		}
		
		if (efCbmir != null) {
			codeLength += efCbmir.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 14
			reverseOS.write(0xAE);
			codeLength += 1;
		}
		
		if (efExt3 != null) {
			codeLength += efExt3.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
			reverseOS.write(0xAD);
			codeLength += 1;
		}
		
		if (efExt2 != null) {
			codeLength += efExt2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
			reverseOS.write(0xAC);
			codeLength += 1;
		}
		
		if (efSdn != null) {
			codeLength += efSdn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			reverseOS.write(0xAB);
			codeLength += 1;
		}
		
		if (efCbmid != null) {
			codeLength += efCbmid.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
		}
		
		if (efCbmi != null) {
			codeLength += efCbmi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (efPuct != null) {
			codeLength += efPuct.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			reverseOS.write(0xA8);
			codeLength += 1;
		}
		
		if (efMsisdn != null) {
			codeLength += efMsisdn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		if (efGid2 != null) {
			codeLength += efGid2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			reverseOS.write(0xA6);
			codeLength += 1;
		}
		
		if (efGid1 != null) {
			codeLength += efGid1.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		if (efAcm != null) {
			codeLength += efAcm.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
		}
		
		if (efAcmax != null) {
			codeLength += efAcmax.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (efLi != null) {
			codeLength += efLi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		codeLength += templateID.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += optusimHeader.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		if (totalLength == -1) {
			subCodeLength += berTag.decode(is);

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				optusimHeader = new PEHeader();
				subCodeLength += optusimHeader.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				templateID = new BerObjectIdentifier();
				subCodeLength += templateID.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				efLi = new File();
				subCodeLength += efLi.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
				efAcmax = new File();
				subCodeLength += efAcmax.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
				efAcm = new File();
				subCodeLength += efAcm.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
				efGid1 = new File();
				subCodeLength += efGid1.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
				efGid2 = new File();
				subCodeLength += efGid2.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
				efMsisdn = new File();
				subCodeLength += efMsisdn.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
				efPuct = new File();
				subCodeLength += efPuct.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
				efCbmi = new File();
				subCodeLength += efCbmi.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
				efCbmid = new File();
				subCodeLength += efCbmid.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
				efSdn = new File();
				subCodeLength += efSdn.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
				efExt2 = new File();
				subCodeLength += efExt2.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
				efExt3 = new File();
				subCodeLength += efExt3.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 14)) {
				efCbmir = new File();
				subCodeLength += efCbmir.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
				efPlmnwact = new File();
				subCodeLength += efPlmnwact.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
				efOplmnwact = new File();
				subCodeLength += efOplmnwact.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
				efHplmnwact = new File();
				subCodeLength += efHplmnwact.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 18)) {
				efDck = new File();
				subCodeLength += efDck.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
				efCnl = new File();
				subCodeLength += efCnl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
				efSmsr = new File();
				subCodeLength += efSmsr.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
				efBdn = new File();
				subCodeLength += efBdn.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 22)) {
				efExt5 = new File();
				subCodeLength += efExt5.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 23)) {
				efCcp2 = new File();
				subCodeLength += efCcp2.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 24)) {
				efExt4 = new File();
				subCodeLength += efExt4.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 25)) {
				efAcl = new File();
				subCodeLength += efAcl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 26)) {
				efCmi = new File();
				subCodeLength += efCmi.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 27)) {
				efIci = new File();
				subCodeLength += efIci.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 28)) {
				efOci = new File();
				subCodeLength += efOci.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 29)) {
				efIct = new File();
				subCodeLength += efIct.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 30)) {
				efOct = new File();
				subCodeLength += efOct.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 31)) {
				efVgcs = new File();
				subCodeLength += efVgcs.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 32)) {
				efVgcss = new File();
				subCodeLength += efVgcss.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 33)) {
				efVbs = new File();
				subCodeLength += efVbs.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 34)) {
				efVbss = new File();
				subCodeLength += efVbss.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
				efEmlpp = new File();
				subCodeLength += efEmlpp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
				efAaem = new File();
				subCodeLength += efAaem.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 37)) {
				efHiddenkey = new File();
				subCodeLength += efHiddenkey.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 38)) {
				efPnn = new File();
				subCodeLength += efPnn.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 39)) {
				efOpl = new File();
				subCodeLength += efOpl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 40)) {
				efMbdn = new File();
				subCodeLength += efMbdn.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 41)) {
				efExt6 = new File();
				subCodeLength += efExt6.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 42)) {
				efMbi = new File();
				subCodeLength += efMbi.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 43)) {
				efMwis = new File();
				subCodeLength += efMwis.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 44)) {
				efCfis = new File();
				subCodeLength += efCfis.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 45)) {
				efExt7 = new File();
				subCodeLength += efExt7.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 46)) {
				efSpdi = new File();
				subCodeLength += efSpdi.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 47)) {
				efMmsn = new File();
				subCodeLength += efMmsn.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 48)) {
				efExt8 = new File();
				subCodeLength += efExt8.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 49)) {
				efMmsicp = new File();
				subCodeLength += efMmsicp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 50)) {
				efMmsup = new File();
				subCodeLength += efMmsup.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 51)) {
				efMmsucp = new File();
				subCodeLength += efMmsucp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 52)) {
				efNia = new File();
				subCodeLength += efNia.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 53)) {
				efVgcsca = new File();
				subCodeLength += efVgcsca.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 54)) {
				efVbsca = new File();
				subCodeLength += efVbsca.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 55)) {
				efGbabp = new File();
				subCodeLength += efGbabp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 56)) {
				efMsk = new File();
				subCodeLength += efMsk.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 57)) {
				efMuk = new File();
				subCodeLength += efMuk.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 58)) {
				efEhplmn = new File();
				subCodeLength += efEhplmn.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 59)) {
				efGbanl = new File();
				subCodeLength += efGbanl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 60)) {
				efEhplmnpi = new File();
				subCodeLength += efEhplmnpi.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 61)) {
				efLrplmnsi = new File();
				subCodeLength += efLrplmnsi.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 62)) {
				efNafkca = new File();
				subCodeLength += efNafkca.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 63)) {
				efSpni = new File();
				subCodeLength += efSpni.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 64)) {
				efPnni = new File();
				subCodeLength += efPnni.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 65)) {
				efNcpIp = new File();
				subCodeLength += efNcpIp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 66)) {
				efUfc = new File();
				subCodeLength += efUfc.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 67)) {
				efNasconfig = new File();
				subCodeLength += efNasconfig.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 68)) {
				efUicciari = new File();
				subCodeLength += efUicciari.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 69)) {
				efPws = new File();
				subCodeLength += efPws.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 70)) {
				efFdnuri = new File();
				subCodeLength += efFdnuri.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 71)) {
				efBdnuri = new File();
				subCodeLength += efBdnuri.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 72)) {
				efSdnuri = new File();
				subCodeLength += efSdnuri.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 73)) {
				efIwl = new File();
				subCodeLength += efIwl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 74)) {
				efIps = new File();
				subCodeLength += efIps.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 75)) {
				efIpd = new File();
				subCodeLength += efIpd.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			int nextByte = is.read();
			if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			optusimHeader = new PEHeader();
			subCodeLength += optusimHeader.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			templateID = new BerObjectIdentifier();
			subCodeLength += templateID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			efLi = new File();
			subCodeLength += efLi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			efAcmax = new File();
			subCodeLength += efAcmax.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			efAcm = new File();
			subCodeLength += efAcm.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			efGid1 = new File();
			subCodeLength += efGid1.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			efGid2 = new File();
			subCodeLength += efGid2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			efMsisdn = new File();
			subCodeLength += efMsisdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			efPuct = new File();
			subCodeLength += efPuct.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			efCbmi = new File();
			subCodeLength += efCbmi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			efCbmid = new File();
			subCodeLength += efCbmid.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			efSdn = new File();
			subCodeLength += efSdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			efExt2 = new File();
			subCodeLength += efExt2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
			efExt3 = new File();
			subCodeLength += efExt3.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 14)) {
			efCbmir = new File();
			subCodeLength += efCbmir.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
			efPlmnwact = new File();
			subCodeLength += efPlmnwact.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
			efOplmnwact = new File();
			subCodeLength += efOplmnwact.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
			efHplmnwact = new File();
			subCodeLength += efHplmnwact.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 18)) {
			efDck = new File();
			subCodeLength += efDck.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			efCnl = new File();
			subCodeLength += efCnl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
			efSmsr = new File();
			subCodeLength += efSmsr.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
			efBdn = new File();
			subCodeLength += efBdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 22)) {
			efExt5 = new File();
			subCodeLength += efExt5.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 23)) {
			efCcp2 = new File();
			subCodeLength += efCcp2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 24)) {
			efExt4 = new File();
			subCodeLength += efExt4.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 25)) {
			efAcl = new File();
			subCodeLength += efAcl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 26)) {
			efCmi = new File();
			subCodeLength += efCmi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 27)) {
			efIci = new File();
			subCodeLength += efIci.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 28)) {
			efOci = new File();
			subCodeLength += efOci.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 29)) {
			efIct = new File();
			subCodeLength += efIct.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 30)) {
			efOct = new File();
			subCodeLength += efOct.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 31)) {
			efVgcs = new File();
			subCodeLength += efVgcs.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 32)) {
			efVgcss = new File();
			subCodeLength += efVgcss.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 33)) {
			efVbs = new File();
			subCodeLength += efVbs.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 34)) {
			efVbss = new File();
			subCodeLength += efVbss.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
			efEmlpp = new File();
			subCodeLength += efEmlpp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
			efAaem = new File();
			subCodeLength += efAaem.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 37)) {
			efHiddenkey = new File();
			subCodeLength += efHiddenkey.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 38)) {
			efPnn = new File();
			subCodeLength += efPnn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 39)) {
			efOpl = new File();
			subCodeLength += efOpl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 40)) {
			efMbdn = new File();
			subCodeLength += efMbdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 41)) {
			efExt6 = new File();
			subCodeLength += efExt6.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 42)) {
			efMbi = new File();
			subCodeLength += efMbi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 43)) {
			efMwis = new File();
			subCodeLength += efMwis.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 44)) {
			efCfis = new File();
			subCodeLength += efCfis.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 45)) {
			efExt7 = new File();
			subCodeLength += efExt7.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 46)) {
			efSpdi = new File();
			subCodeLength += efSpdi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 47)) {
			efMmsn = new File();
			subCodeLength += efMmsn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 48)) {
			efExt8 = new File();
			subCodeLength += efExt8.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 49)) {
			efMmsicp = new File();
			subCodeLength += efMmsicp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 50)) {
			efMmsup = new File();
			subCodeLength += efMmsup.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 51)) {
			efMmsucp = new File();
			subCodeLength += efMmsucp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 52)) {
			efNia = new File();
			subCodeLength += efNia.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 53)) {
			efVgcsca = new File();
			subCodeLength += efVgcsca.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 54)) {
			efVbsca = new File();
			subCodeLength += efVbsca.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 55)) {
			efGbabp = new File();
			subCodeLength += efGbabp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 56)) {
			efMsk = new File();
			subCodeLength += efMsk.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 57)) {
			efMuk = new File();
			subCodeLength += efMuk.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 58)) {
			efEhplmn = new File();
			subCodeLength += efEhplmn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 59)) {
			efGbanl = new File();
			subCodeLength += efGbanl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 60)) {
			efEhplmnpi = new File();
			subCodeLength += efEhplmnpi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 61)) {
			efLrplmnsi = new File();
			subCodeLength += efLrplmnsi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 62)) {
			efNafkca = new File();
			subCodeLength += efNafkca.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 63)) {
			efSpni = new File();
			subCodeLength += efSpni.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 64)) {
			efPnni = new File();
			subCodeLength += efPnni.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 65)) {
			efNcpIp = new File();
			subCodeLength += efNcpIp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 66)) {
			efUfc = new File();
			subCodeLength += efUfc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 67)) {
			efNasconfig = new File();
			subCodeLength += efNasconfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 68)) {
			efUicciari = new File();
			subCodeLength += efUicciari.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 69)) {
			efPws = new File();
			subCodeLength += efPws.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 70)) {
			efFdnuri = new File();
			subCodeLength += efFdnuri.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 71)) {
			efBdnuri = new File();
			subCodeLength += efBdnuri.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 72)) {
			efSdnuri = new File();
			subCodeLength += efSdnuri.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 73)) {
			efIwl = new File();
			subCodeLength += efIwl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 74)) {
			efIps = new File();
			subCodeLength += efIps.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 75)) {
			efIpd = new File();
			subCodeLength += efIpd.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (optusimHeader != null) {
			sb.append("optusimHeader: ");
			optusimHeader.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("optusimHeader: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (templateID != null) {
			sb.append("templateID: ").append(templateID);
		}
		else {
			sb.append("templateID: <empty-required-field>");
		}
		
		if (efLi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efLi: ");
			efLi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efAcmax != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efAcmax: ");
			efAcmax.appendAsString(sb, indentLevel + 1);
		}
		
		if (efAcm != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efAcm: ");
			efAcm.appendAsString(sb, indentLevel + 1);
		}
		
		if (efGid1 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efGid1: ");
			efGid1.appendAsString(sb, indentLevel + 1);
		}
		
		if (efGid2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efGid2: ");
			efGid2.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMsisdn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMsisdn: ");
			efMsisdn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPuct != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPuct: ");
			efPuct.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCbmi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCbmi: ");
			efCbmi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCbmid != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCbmid: ");
			efCbmid.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSdn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSdn: ");
			efSdn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt2: ");
			efExt2.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt3 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt3: ");
			efExt3.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCbmir != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCbmir: ");
			efCbmir.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPlmnwact != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPlmnwact: ");
			efPlmnwact.appendAsString(sb, indentLevel + 1);
		}
		
		if (efOplmnwact != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efOplmnwact: ");
			efOplmnwact.appendAsString(sb, indentLevel + 1);
		}
		
		if (efHplmnwact != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efHplmnwact: ");
			efHplmnwact.appendAsString(sb, indentLevel + 1);
		}
		
		if (efDck != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efDck: ");
			efDck.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCnl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCnl: ");
			efCnl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSmsr != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSmsr: ");
			efSmsr.appendAsString(sb, indentLevel + 1);
		}
		
		if (efBdn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efBdn: ");
			efBdn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt5 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt5: ");
			efExt5.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCcp2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCcp2: ");
			efCcp2.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt4 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt4: ");
			efExt4.appendAsString(sb, indentLevel + 1);
		}
		
		if (efAcl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efAcl: ");
			efAcl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCmi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCmi: ");
			efCmi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIci != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIci: ");
			efIci.appendAsString(sb, indentLevel + 1);
		}
		
		if (efOci != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efOci: ");
			efOci.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIct != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIct: ");
			efIct.appendAsString(sb, indentLevel + 1);
		}
		
		if (efOct != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efOct: ");
			efOct.appendAsString(sb, indentLevel + 1);
		}
		
		if (efVgcs != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efVgcs: ");
			efVgcs.appendAsString(sb, indentLevel + 1);
		}
		
		if (efVgcss != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efVgcss: ");
			efVgcss.appendAsString(sb, indentLevel + 1);
		}
		
		if (efVbs != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efVbs: ");
			efVbs.appendAsString(sb, indentLevel + 1);
		}
		
		if (efVbss != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efVbss: ");
			efVbss.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEmlpp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEmlpp: ");
			efEmlpp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efAaem != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efAaem: ");
			efAaem.appendAsString(sb, indentLevel + 1);
		}
		
		if (efHiddenkey != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efHiddenkey: ");
			efHiddenkey.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPnn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPnn: ");
			efPnn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efOpl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efOpl: ");
			efOpl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMbdn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMbdn: ");
			efMbdn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt6 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt6: ");
			efExt6.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMbi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMbi: ");
			efMbi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMwis != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMwis: ");
			efMwis.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCfis != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCfis: ");
			efCfis.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt7 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt7: ");
			efExt7.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSpdi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSpdi: ");
			efSpdi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmsn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmsn: ");
			efMmsn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt8 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt8: ");
			efExt8.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmsicp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmsicp: ");
			efMmsicp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmsup != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmsup: ");
			efMmsup.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmsucp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmsucp: ");
			efMmsucp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efNia != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efNia: ");
			efNia.appendAsString(sb, indentLevel + 1);
		}
		
		if (efVgcsca != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efVgcsca: ");
			efVgcsca.appendAsString(sb, indentLevel + 1);
		}
		
		if (efVbsca != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efVbsca: ");
			efVbsca.appendAsString(sb, indentLevel + 1);
		}
		
		if (efGbabp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efGbabp: ");
			efGbabp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMsk != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMsk: ");
			efMsk.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMuk != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMuk: ");
			efMuk.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEhplmn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEhplmn: ");
			efEhplmn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efGbanl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efGbanl: ");
			efGbanl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEhplmnpi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEhplmnpi: ");
			efEhplmnpi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efLrplmnsi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efLrplmnsi: ");
			efLrplmnsi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efNafkca != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efNafkca: ");
			efNafkca.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSpni != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSpni: ");
			efSpni.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPnni != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPnni: ");
			efPnni.appendAsString(sb, indentLevel + 1);
		}
		
		if (efNcpIp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efNcpIp: ");
			efNcpIp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efUfc != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efUfc: ");
			efUfc.appendAsString(sb, indentLevel + 1);
		}
		
		if (efNasconfig != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efNasconfig: ");
			efNasconfig.appendAsString(sb, indentLevel + 1);
		}
		
		if (efUicciari != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efUicciari: ");
			efUicciari.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPws != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPws: ");
			efPws.appendAsString(sb, indentLevel + 1);
		}
		
		if (efFdnuri != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efFdnuri: ");
			efFdnuri.appendAsString(sb, indentLevel + 1);
		}
		
		if (efBdnuri != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efBdnuri: ");
			efBdnuri.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSdnuri != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSdnuri: ");
			efSdnuri.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIwl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIwl: ");
			efIwl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIps != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIps: ");
			efIps.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIpd != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIpd: ");
			efIpd.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

