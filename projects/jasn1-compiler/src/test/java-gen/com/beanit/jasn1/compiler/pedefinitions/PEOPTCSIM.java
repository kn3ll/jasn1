/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Collections;
import java.util.Arrays;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class PEOPTCSIM implements BerSequenceSet, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	public PEHeader optcsimHeader = null;
	public BerObjectIdentifier templateID = null;
	public File efSsci = null;
	public File efFdn = null;
	public File efSms = null;
	public File efSmsp = null;
	public File efSmss = null;
	public File efSsfc = null;
	public File efSpn = null;
	public File efMdn = null;
	public File efEcc = null;
	public File efMe3gpdopc = null;
	public File ef3gpdopm = null;
	public File efSipcap = null;
	public File efMipcap = null;
	public File efSipupp = null;
	public File efMipupp = null;
	public File efSipsp = null;
	public File efMipsp = null;
	public File efSippapss = null;
	public File efPuzl = null;
	public File efMaxpuzl = null;
	public File efHrpdcap = null;
	public File efHrpdupp = null;
	public File efCsspr = null;
	public File efAtc = null;
	public File efEprl = null;
	public File efBcsmscfg = null;
	public File efBcsmspref = null;
	public File efBcsmstable = null;
	public File efBcsmsp = null;
	public File efBakpara = null;
	public File efUpbakpara = null;
	public File efMmsn = null;
	public File efExt8 = null;
	public File efMmsicp = null;
	public File efMmsup = null;
	public File efMmsucp = null;
	public File efAuthCapability = null;
	public File ef3gcik = null;
	public File efDck = null;
	public File efGid1 = null;
	public File efGid2 = null;
	public File efCdmacnl = null;
	public File efSfEuimid = null;
	public File efEst = null;
	public File efHiddenKey = null;
	public File efLcsver = null;
	public File efLcscp = null;
	public File efSdn = null;
	public File efExt2 = null;
	public File efExt3 = null;
	public File efIci = null;
	public File efOci = null;
	public File efExt5 = null;
	public File efCcp2 = null;
	public File efApplabels = null;
	public File efModel = null;
	public File efRc = null;
	public File efSmscap = null;
	public File efMipflags = null;
	public File ef3gpduppext = null;
	public File efIpv6cap = null;
	public File efTcpconfig = null;
	public File efDgc = null;
	public File efWapbrowsercp = null;
	public File efWapbrowserbm = null;
	public File efMmsconfig = null;
	public File efJdl = null;
	
	public PEOPTCSIM() {
	}

	public PEOPTCSIM(byte[] code) {
		this.code = code;
	}

	public PEOPTCSIM(PEHeader optcsimHeader, BerObjectIdentifier templateID, File efSsci, File efFdn, File efSms, File efSmsp, File efSmss, File efSsfc, File efSpn, File efMdn, File efEcc, File efMe3gpdopc, File ef3gpdopm, File efSipcap, File efMipcap, File efSipupp, File efMipupp, File efSipsp, File efMipsp, File efSippapss, File efPuzl, File efMaxpuzl, File efHrpdcap, File efHrpdupp, File efCsspr, File efAtc, File efEprl, File efBcsmscfg, File efBcsmspref, File efBcsmstable, File efBcsmsp, File efBakpara, File efUpbakpara, File efMmsn, File efExt8, File efMmsicp, File efMmsup, File efMmsucp, File efAuthCapability, File ef3gcik, File efDck, File efGid1, File efGid2, File efCdmacnl, File efSfEuimid, File efEst, File efHiddenKey, File efLcsver, File efLcscp, File efSdn, File efExt2, File efExt3, File efIci, File efOci, File efExt5, File efCcp2, File efApplabels, File efModel, File efRc, File efSmscap, File efMipflags, File ef3gpduppext, File efIpv6cap, File efTcpconfig, File efDgc, File efWapbrowsercp, File efWapbrowserbm, File efMmsconfig, File efJdl) {
		this.optcsimHeader = optcsimHeader;
		this.templateID = templateID;
		this.efSsci = efSsci;
		this.efFdn = efFdn;
		this.efSms = efSms;
		this.efSmsp = efSmsp;
		this.efSmss = efSmss;
		this.efSsfc = efSsfc;
		this.efSpn = efSpn;
		this.efMdn = efMdn;
		this.efEcc = efEcc;
		this.efMe3gpdopc = efMe3gpdopc;
		this.ef3gpdopm = ef3gpdopm;
		this.efSipcap = efSipcap;
		this.efMipcap = efMipcap;
		this.efSipupp = efSipupp;
		this.efMipupp = efMipupp;
		this.efSipsp = efSipsp;
		this.efMipsp = efMipsp;
		this.efSippapss = efSippapss;
		this.efPuzl = efPuzl;
		this.efMaxpuzl = efMaxpuzl;
		this.efHrpdcap = efHrpdcap;
		this.efHrpdupp = efHrpdupp;
		this.efCsspr = efCsspr;
		this.efAtc = efAtc;
		this.efEprl = efEprl;
		this.efBcsmscfg = efBcsmscfg;
		this.efBcsmspref = efBcsmspref;
		this.efBcsmstable = efBcsmstable;
		this.efBcsmsp = efBcsmsp;
		this.efBakpara = efBakpara;
		this.efUpbakpara = efUpbakpara;
		this.efMmsn = efMmsn;
		this.efExt8 = efExt8;
		this.efMmsicp = efMmsicp;
		this.efMmsup = efMmsup;
		this.efMmsucp = efMmsucp;
		this.efAuthCapability = efAuthCapability;
		this.ef3gcik = ef3gcik;
		this.efDck = efDck;
		this.efGid1 = efGid1;
		this.efGid2 = efGid2;
		this.efCdmacnl = efCdmacnl;
		this.efSfEuimid = efSfEuimid;
		this.efEst = efEst;
		this.efHiddenKey = efHiddenKey;
		this.efLcsver = efLcsver;
		this.efLcscp = efLcscp;
		this.efSdn = efSdn;
		this.efExt2 = efExt2;
		this.efExt3 = efExt3;
		this.efIci = efIci;
		this.efOci = efOci;
		this.efExt5 = efExt5;
		this.efCcp2 = efCcp2;
		this.efApplabels = efApplabels;
		this.efModel = efModel;
		this.efRc = efRc;
		this.efSmscap = efSmscap;
		this.efMipflags = efMipflags;
		this.ef3gpduppext = ef3gpduppext;
		this.efIpv6cap = efIpv6cap;
		this.efTcpconfig = efTcpconfig;
		this.efDgc = efDgc;
		this.efWapbrowsercp = efWapbrowsercp;
		this.efWapbrowserbm = efWapbrowserbm;
		this.efMmsconfig = efMmsconfig;
		this.efJdl = efJdl;
	}

	private final transient List<String> FIELDS = Collections.unmodifiableList(Arrays.asList(
		"optcsim-header",
		"templateID",
		"ef-ssci",
		"ef-fdn",
		"ef-sms",
		"ef-smsp",
		"ef-smss",
		"ef-ssfc",
		"ef-spn",
		"ef-mdn",
		"ef-ecc",
		"ef-me3gpdopc",
		"ef-3gpdopm",
		"ef-sipcap",
		"ef-mipcap",
		"ef-sipupp",
		"ef-mipupp",
		"ef-sipsp",
		"ef-mipsp",
		"ef-sippapss",
		"ef-puzl",
		"ef-maxpuzl",
		"ef-hrpdcap",
		"ef-hrpdupp",
		"ef-csspr",
		"ef-atc",
		"ef-eprl",
		"ef-bcsmscfg",
		"ef-bcsmspref",
		"ef-bcsmstable",
		"ef-bcsmsp",
		"ef-bakpara",
		"ef-upbakpara",
		"ef-mmsn",
		"ef-ext8",
		"ef-mmsicp",
		"ef-mmsup",
		"ef-mmsucp",
		"ef-auth-capability",
		"ef-3gcik",
		"ef-dck",
		"ef-gid1",
		"ef-gid2",
		"ef-cdmacnl",
		"ef-sf-euimid",
		"ef-est",
		"ef-hidden-key",
		"ef-lcsver",
		"ef-lcscp",
		"ef-sdn",
		"ef-ext2",
		"ef-ext3",
		"ef-ici",
		"ef-oci",
		"ef-ext5",
		"ef-ccp2",
		"ef-applabels",
		"ef-model",
		"ef-rc",
		"ef-smscap",
		"ef-mipflags",
		"ef-3gpduppext",
		"ef-ipv6cap",
		"ef-tcpconfig",
		"ef-dgc",
		"ef-wapbrowsercp",
		"ef-wapbrowserbm",
		"ef-mmsconfig",
		"ef-jdl"
	));
	public List<String> getFields() {
		return FIELDS;
	}
	public BerType getField(String fieldName) {
		switch(fieldName) {
			case "optcsim-header":
			case "optcsimHeader":
				return optcsimHeader;
			case "templateID":
				return templateID;
			case "ef-ssci":
			case "efSsci":
				return efSsci;
			case "ef-fdn":
			case "efFdn":
				return efFdn;
			case "ef-sms":
			case "efSms":
				return efSms;
			case "ef-smsp":
			case "efSmsp":
				return efSmsp;
			case "ef-smss":
			case "efSmss":
				return efSmss;
			case "ef-ssfc":
			case "efSsfc":
				return efSsfc;
			case "ef-spn":
			case "efSpn":
				return efSpn;
			case "ef-mdn":
			case "efMdn":
				return efMdn;
			case "ef-ecc":
			case "efEcc":
				return efEcc;
			case "ef-me3gpdopc":
			case "efMe3gpdopc":
				return efMe3gpdopc;
			case "ef-3gpdopm":
			case "ef3gpdopm":
				return ef3gpdopm;
			case "ef-sipcap":
			case "efSipcap":
				return efSipcap;
			case "ef-mipcap":
			case "efMipcap":
				return efMipcap;
			case "ef-sipupp":
			case "efSipupp":
				return efSipupp;
			case "ef-mipupp":
			case "efMipupp":
				return efMipupp;
			case "ef-sipsp":
			case "efSipsp":
				return efSipsp;
			case "ef-mipsp":
			case "efMipsp":
				return efMipsp;
			case "ef-sippapss":
			case "efSippapss":
				return efSippapss;
			case "ef-puzl":
			case "efPuzl":
				return efPuzl;
			case "ef-maxpuzl":
			case "efMaxpuzl":
				return efMaxpuzl;
			case "ef-hrpdcap":
			case "efHrpdcap":
				return efHrpdcap;
			case "ef-hrpdupp":
			case "efHrpdupp":
				return efHrpdupp;
			case "ef-csspr":
			case "efCsspr":
				return efCsspr;
			case "ef-atc":
			case "efAtc":
				return efAtc;
			case "ef-eprl":
			case "efEprl":
				return efEprl;
			case "ef-bcsmscfg":
			case "efBcsmscfg":
				return efBcsmscfg;
			case "ef-bcsmspref":
			case "efBcsmspref":
				return efBcsmspref;
			case "ef-bcsmstable":
			case "efBcsmstable":
				return efBcsmstable;
			case "ef-bcsmsp":
			case "efBcsmsp":
				return efBcsmsp;
			case "ef-bakpara":
			case "efBakpara":
				return efBakpara;
			case "ef-upbakpara":
			case "efUpbakpara":
				return efUpbakpara;
			case "ef-mmsn":
			case "efMmsn":
				return efMmsn;
			case "ef-ext8":
			case "efExt8":
				return efExt8;
			case "ef-mmsicp":
			case "efMmsicp":
				return efMmsicp;
			case "ef-mmsup":
			case "efMmsup":
				return efMmsup;
			case "ef-mmsucp":
			case "efMmsucp":
				return efMmsucp;
			case "ef-auth-capability":
			case "efAuthCapability":
				return efAuthCapability;
			case "ef-3gcik":
			case "ef3gcik":
				return ef3gcik;
			case "ef-dck":
			case "efDck":
				return efDck;
			case "ef-gid1":
			case "efGid1":
				return efGid1;
			case "ef-gid2":
			case "efGid2":
				return efGid2;
			case "ef-cdmacnl":
			case "efCdmacnl":
				return efCdmacnl;
			case "ef-sf-euimid":
			case "efSfEuimid":
				return efSfEuimid;
			case "ef-est":
			case "efEst":
				return efEst;
			case "ef-hidden-key":
			case "efHiddenKey":
				return efHiddenKey;
			case "ef-lcsver":
			case "efLcsver":
				return efLcsver;
			case "ef-lcscp":
			case "efLcscp":
				return efLcscp;
			case "ef-sdn":
			case "efSdn":
				return efSdn;
			case "ef-ext2":
			case "efExt2":
				return efExt2;
			case "ef-ext3":
			case "efExt3":
				return efExt3;
			case "ef-ici":
			case "efIci":
				return efIci;
			case "ef-oci":
			case "efOci":
				return efOci;
			case "ef-ext5":
			case "efExt5":
				return efExt5;
			case "ef-ccp2":
			case "efCcp2":
				return efCcp2;
			case "ef-applabels":
			case "efApplabels":
				return efApplabels;
			case "ef-model":
			case "efModel":
				return efModel;
			case "ef-rc":
			case "efRc":
				return efRc;
			case "ef-smscap":
			case "efSmscap":
				return efSmscap;
			case "ef-mipflags":
			case "efMipflags":
				return efMipflags;
			case "ef-3gpduppext":
			case "ef3gpduppext":
				return ef3gpduppext;
			case "ef-ipv6cap":
			case "efIpv6cap":
				return efIpv6cap;
			case "ef-tcpconfig":
			case "efTcpconfig":
				return efTcpconfig;
			case "ef-dgc":
			case "efDgc":
				return efDgc;
			case "ef-wapbrowsercp":
			case "efWapbrowsercp":
				return efWapbrowsercp;
			case "ef-wapbrowserbm":
			case "efWapbrowserbm":
				return efWapbrowserbm;
			case "ef-mmsconfig":
			case "efMmsconfig":
				return efMmsconfig;
			case "ef-jdl":
			case "efJdl":
				return efJdl;
			default:
				return null;
		}
	}
	public Class<? extends BerType> getFieldClass(String fieldName) {
		switch(fieldName) {
			case "optcsim-header":
			case "optcsimHeader":
				return PEHeader.class;
			case "templateID":
				return BerObjectIdentifier.class;
			case "ef-ssci":
			case "efSsci":
				return File.class;
			case "ef-fdn":
			case "efFdn":
				return File.class;
			case "ef-sms":
			case "efSms":
				return File.class;
			case "ef-smsp":
			case "efSmsp":
				return File.class;
			case "ef-smss":
			case "efSmss":
				return File.class;
			case "ef-ssfc":
			case "efSsfc":
				return File.class;
			case "ef-spn":
			case "efSpn":
				return File.class;
			case "ef-mdn":
			case "efMdn":
				return File.class;
			case "ef-ecc":
			case "efEcc":
				return File.class;
			case "ef-me3gpdopc":
			case "efMe3gpdopc":
				return File.class;
			case "ef-3gpdopm":
			case "ef3gpdopm":
				return File.class;
			case "ef-sipcap":
			case "efSipcap":
				return File.class;
			case "ef-mipcap":
			case "efMipcap":
				return File.class;
			case "ef-sipupp":
			case "efSipupp":
				return File.class;
			case "ef-mipupp":
			case "efMipupp":
				return File.class;
			case "ef-sipsp":
			case "efSipsp":
				return File.class;
			case "ef-mipsp":
			case "efMipsp":
				return File.class;
			case "ef-sippapss":
			case "efSippapss":
				return File.class;
			case "ef-puzl":
			case "efPuzl":
				return File.class;
			case "ef-maxpuzl":
			case "efMaxpuzl":
				return File.class;
			case "ef-hrpdcap":
			case "efHrpdcap":
				return File.class;
			case "ef-hrpdupp":
			case "efHrpdupp":
				return File.class;
			case "ef-csspr":
			case "efCsspr":
				return File.class;
			case "ef-atc":
			case "efAtc":
				return File.class;
			case "ef-eprl":
			case "efEprl":
				return File.class;
			case "ef-bcsmscfg":
			case "efBcsmscfg":
				return File.class;
			case "ef-bcsmspref":
			case "efBcsmspref":
				return File.class;
			case "ef-bcsmstable":
			case "efBcsmstable":
				return File.class;
			case "ef-bcsmsp":
			case "efBcsmsp":
				return File.class;
			case "ef-bakpara":
			case "efBakpara":
				return File.class;
			case "ef-upbakpara":
			case "efUpbakpara":
				return File.class;
			case "ef-mmsn":
			case "efMmsn":
				return File.class;
			case "ef-ext8":
			case "efExt8":
				return File.class;
			case "ef-mmsicp":
			case "efMmsicp":
				return File.class;
			case "ef-mmsup":
			case "efMmsup":
				return File.class;
			case "ef-mmsucp":
			case "efMmsucp":
				return File.class;
			case "ef-auth-capability":
			case "efAuthCapability":
				return File.class;
			case "ef-3gcik":
			case "ef3gcik":
				return File.class;
			case "ef-dck":
			case "efDck":
				return File.class;
			case "ef-gid1":
			case "efGid1":
				return File.class;
			case "ef-gid2":
			case "efGid2":
				return File.class;
			case "ef-cdmacnl":
			case "efCdmacnl":
				return File.class;
			case "ef-sf-euimid":
			case "efSfEuimid":
				return File.class;
			case "ef-est":
			case "efEst":
				return File.class;
			case "ef-hidden-key":
			case "efHiddenKey":
				return File.class;
			case "ef-lcsver":
			case "efLcsver":
				return File.class;
			case "ef-lcscp":
			case "efLcscp":
				return File.class;
			case "ef-sdn":
			case "efSdn":
				return File.class;
			case "ef-ext2":
			case "efExt2":
				return File.class;
			case "ef-ext3":
			case "efExt3":
				return File.class;
			case "ef-ici":
			case "efIci":
				return File.class;
			case "ef-oci":
			case "efOci":
				return File.class;
			case "ef-ext5":
			case "efExt5":
				return File.class;
			case "ef-ccp2":
			case "efCcp2":
				return File.class;
			case "ef-applabels":
			case "efApplabels":
				return File.class;
			case "ef-model":
			case "efModel":
				return File.class;
			case "ef-rc":
			case "efRc":
				return File.class;
			case "ef-smscap":
			case "efSmscap":
				return File.class;
			case "ef-mipflags":
			case "efMipflags":
				return File.class;
			case "ef-3gpduppext":
			case "ef3gpduppext":
				return File.class;
			case "ef-ipv6cap":
			case "efIpv6cap":
				return File.class;
			case "ef-tcpconfig":
			case "efTcpconfig":
				return File.class;
			case "ef-dgc":
			case "efDgc":
				return File.class;
			case "ef-wapbrowsercp":
			case "efWapbrowsercp":
				return File.class;
			case "ef-wapbrowserbm":
			case "efWapbrowserbm":
				return File.class;
			case "ef-mmsconfig":
			case "efMmsconfig":
				return File.class;
			case "ef-jdl":
			case "efJdl":
				return File.class;
			default:
				return null;
		}
	}
	public void setField(String fieldName, BerType value) {
		switch(fieldName) {
			case "optcsim-header":
			case "optcsimHeader":
				optcsimHeader = (PEHeader) value;
				break;
			case "templateID":
				templateID = (BerObjectIdentifier) value;
				break;
			case "ef-ssci":
			case "efSsci":
				efSsci = (File) value;
				break;
			case "ef-fdn":
			case "efFdn":
				efFdn = (File) value;
				break;
			case "ef-sms":
			case "efSms":
				efSms = (File) value;
				break;
			case "ef-smsp":
			case "efSmsp":
				efSmsp = (File) value;
				break;
			case "ef-smss":
			case "efSmss":
				efSmss = (File) value;
				break;
			case "ef-ssfc":
			case "efSsfc":
				efSsfc = (File) value;
				break;
			case "ef-spn":
			case "efSpn":
				efSpn = (File) value;
				break;
			case "ef-mdn":
			case "efMdn":
				efMdn = (File) value;
				break;
			case "ef-ecc":
			case "efEcc":
				efEcc = (File) value;
				break;
			case "ef-me3gpdopc":
			case "efMe3gpdopc":
				efMe3gpdopc = (File) value;
				break;
			case "ef-3gpdopm":
			case "ef3gpdopm":
				ef3gpdopm = (File) value;
				break;
			case "ef-sipcap":
			case "efSipcap":
				efSipcap = (File) value;
				break;
			case "ef-mipcap":
			case "efMipcap":
				efMipcap = (File) value;
				break;
			case "ef-sipupp":
			case "efSipupp":
				efSipupp = (File) value;
				break;
			case "ef-mipupp":
			case "efMipupp":
				efMipupp = (File) value;
				break;
			case "ef-sipsp":
			case "efSipsp":
				efSipsp = (File) value;
				break;
			case "ef-mipsp":
			case "efMipsp":
				efMipsp = (File) value;
				break;
			case "ef-sippapss":
			case "efSippapss":
				efSippapss = (File) value;
				break;
			case "ef-puzl":
			case "efPuzl":
				efPuzl = (File) value;
				break;
			case "ef-maxpuzl":
			case "efMaxpuzl":
				efMaxpuzl = (File) value;
				break;
			case "ef-hrpdcap":
			case "efHrpdcap":
				efHrpdcap = (File) value;
				break;
			case "ef-hrpdupp":
			case "efHrpdupp":
				efHrpdupp = (File) value;
				break;
			case "ef-csspr":
			case "efCsspr":
				efCsspr = (File) value;
				break;
			case "ef-atc":
			case "efAtc":
				efAtc = (File) value;
				break;
			case "ef-eprl":
			case "efEprl":
				efEprl = (File) value;
				break;
			case "ef-bcsmscfg":
			case "efBcsmscfg":
				efBcsmscfg = (File) value;
				break;
			case "ef-bcsmspref":
			case "efBcsmspref":
				efBcsmspref = (File) value;
				break;
			case "ef-bcsmstable":
			case "efBcsmstable":
				efBcsmstable = (File) value;
				break;
			case "ef-bcsmsp":
			case "efBcsmsp":
				efBcsmsp = (File) value;
				break;
			case "ef-bakpara":
			case "efBakpara":
				efBakpara = (File) value;
				break;
			case "ef-upbakpara":
			case "efUpbakpara":
				efUpbakpara = (File) value;
				break;
			case "ef-mmsn":
			case "efMmsn":
				efMmsn = (File) value;
				break;
			case "ef-ext8":
			case "efExt8":
				efExt8 = (File) value;
				break;
			case "ef-mmsicp":
			case "efMmsicp":
				efMmsicp = (File) value;
				break;
			case "ef-mmsup":
			case "efMmsup":
				efMmsup = (File) value;
				break;
			case "ef-mmsucp":
			case "efMmsucp":
				efMmsucp = (File) value;
				break;
			case "ef-auth-capability":
			case "efAuthCapability":
				efAuthCapability = (File) value;
				break;
			case "ef-3gcik":
			case "ef3gcik":
				ef3gcik = (File) value;
				break;
			case "ef-dck":
			case "efDck":
				efDck = (File) value;
				break;
			case "ef-gid1":
			case "efGid1":
				efGid1 = (File) value;
				break;
			case "ef-gid2":
			case "efGid2":
				efGid2 = (File) value;
				break;
			case "ef-cdmacnl":
			case "efCdmacnl":
				efCdmacnl = (File) value;
				break;
			case "ef-sf-euimid":
			case "efSfEuimid":
				efSfEuimid = (File) value;
				break;
			case "ef-est":
			case "efEst":
				efEst = (File) value;
				break;
			case "ef-hidden-key":
			case "efHiddenKey":
				efHiddenKey = (File) value;
				break;
			case "ef-lcsver":
			case "efLcsver":
				efLcsver = (File) value;
				break;
			case "ef-lcscp":
			case "efLcscp":
				efLcscp = (File) value;
				break;
			case "ef-sdn":
			case "efSdn":
				efSdn = (File) value;
				break;
			case "ef-ext2":
			case "efExt2":
				efExt2 = (File) value;
				break;
			case "ef-ext3":
			case "efExt3":
				efExt3 = (File) value;
				break;
			case "ef-ici":
			case "efIci":
				efIci = (File) value;
				break;
			case "ef-oci":
			case "efOci":
				efOci = (File) value;
				break;
			case "ef-ext5":
			case "efExt5":
				efExt5 = (File) value;
				break;
			case "ef-ccp2":
			case "efCcp2":
				efCcp2 = (File) value;
				break;
			case "ef-applabels":
			case "efApplabels":
				efApplabels = (File) value;
				break;
			case "ef-model":
			case "efModel":
				efModel = (File) value;
				break;
			case "ef-rc":
			case "efRc":
				efRc = (File) value;
				break;
			case "ef-smscap":
			case "efSmscap":
				efSmscap = (File) value;
				break;
			case "ef-mipflags":
			case "efMipflags":
				efMipflags = (File) value;
				break;
			case "ef-3gpduppext":
			case "ef3gpduppext":
				ef3gpduppext = (File) value;
				break;
			case "ef-ipv6cap":
			case "efIpv6cap":
				efIpv6cap = (File) value;
				break;
			case "ef-tcpconfig":
			case "efTcpconfig":
				efTcpconfig = (File) value;
				break;
			case "ef-dgc":
			case "efDgc":
				efDgc = (File) value;
				break;
			case "ef-wapbrowsercp":
			case "efWapbrowsercp":
				efWapbrowsercp = (File) value;
				break;
			case "ef-wapbrowserbm":
			case "efWapbrowserbm":
				efWapbrowserbm = (File) value;
				break;
			case "ef-mmsconfig":
			case "efMmsconfig":
				efMmsconfig = (File) value;
				break;
			case "ef-jdl":
			case "efJdl":
				efJdl = (File) value;
				break;
			default:
				throw new IllegalArgumentException("Unknown field " + fieldName);
		}
	}
	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (efJdl != null) {
			codeLength += efJdl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 68
			reverseOS.write(0x44);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmsconfig != null) {
			codeLength += efMmsconfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 67
			reverseOS.write(0x43);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efWapbrowserbm != null) {
			codeLength += efWapbrowserbm.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 66
			reverseOS.write(0x42);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efWapbrowsercp != null) {
			codeLength += efWapbrowsercp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 65
			reverseOS.write(0x41);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efDgc != null) {
			codeLength += efDgc.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 64
			reverseOS.write(0x40);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efTcpconfig != null) {
			codeLength += efTcpconfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 63
			reverseOS.write(0x3F);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efIpv6cap != null) {
			codeLength += efIpv6cap.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 62
			reverseOS.write(0x3E);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (ef3gpduppext != null) {
			codeLength += ef3gpduppext.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 61
			reverseOS.write(0x3D);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMipflags != null) {
			codeLength += efMipflags.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 60
			reverseOS.write(0x3C);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efSmscap != null) {
			codeLength += efSmscap.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 59
			reverseOS.write(0x3B);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efRc != null) {
			codeLength += efRc.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 58
			reverseOS.write(0x3A);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efModel != null) {
			codeLength += efModel.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 57
			reverseOS.write(0x39);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efApplabels != null) {
			codeLength += efApplabels.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 56
			reverseOS.write(0x38);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efCcp2 != null) {
			codeLength += efCcp2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 55
			reverseOS.write(0x37);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efExt5 != null) {
			codeLength += efExt5.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 54
			reverseOS.write(0x36);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efOci != null) {
			codeLength += efOci.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 53
			reverseOS.write(0x35);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efIci != null) {
			codeLength += efIci.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 52
			reverseOS.write(0x34);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efExt3 != null) {
			codeLength += efExt3.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 51
			reverseOS.write(0x33);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efExt2 != null) {
			codeLength += efExt2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 50
			reverseOS.write(0x32);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efSdn != null) {
			codeLength += efSdn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 49
			reverseOS.write(0x31);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efLcscp != null) {
			codeLength += efLcscp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 48
			reverseOS.write(0x30);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efLcsver != null) {
			codeLength += efLcsver.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 47
			reverseOS.write(0x2F);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efHiddenKey != null) {
			codeLength += efHiddenKey.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 46
			reverseOS.write(0x2E);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efEst != null) {
			codeLength += efEst.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 45
			reverseOS.write(0x2D);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efSfEuimid != null) {
			codeLength += efSfEuimid.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 44
			reverseOS.write(0x2C);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efCdmacnl != null) {
			codeLength += efCdmacnl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 43
			reverseOS.write(0x2B);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efGid2 != null) {
			codeLength += efGid2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 42
			reverseOS.write(0x2A);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efGid1 != null) {
			codeLength += efGid1.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 41
			reverseOS.write(0x29);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efDck != null) {
			codeLength += efDck.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 40
			reverseOS.write(0x28);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (ef3gcik != null) {
			codeLength += ef3gcik.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 39
			reverseOS.write(0x27);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efAuthCapability != null) {
			codeLength += efAuthCapability.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 38
			reverseOS.write(0x26);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmsucp != null) {
			codeLength += efMmsucp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 37
			reverseOS.write(0x25);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmsup != null) {
			codeLength += efMmsup.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 36
			reverseOS.write(0x24);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmsicp != null) {
			codeLength += efMmsicp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 35
			reverseOS.write(0x23);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efExt8 != null) {
			codeLength += efExt8.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 34
			reverseOS.write(0x22);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmsn != null) {
			codeLength += efMmsn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 33
			reverseOS.write(0x21);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efUpbakpara != null) {
			codeLength += efUpbakpara.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 32
			reverseOS.write(0x20);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efBakpara != null) {
			codeLength += efBakpara.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 31
			reverseOS.write(0x1F);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efBcsmsp != null) {
			codeLength += efBcsmsp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 30
			reverseOS.write(0xBE);
			codeLength += 1;
		}
		
		if (efBcsmstable != null) {
			codeLength += efBcsmstable.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 29
			reverseOS.write(0xBD);
			codeLength += 1;
		}
		
		if (efBcsmspref != null) {
			codeLength += efBcsmspref.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 28
			reverseOS.write(0xBC);
			codeLength += 1;
		}
		
		if (efBcsmscfg != null) {
			codeLength += efBcsmscfg.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 27
			reverseOS.write(0xBB);
			codeLength += 1;
		}
		
		if (efEprl != null) {
			codeLength += efEprl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 26
			reverseOS.write(0xBA);
			codeLength += 1;
		}
		
		if (efAtc != null) {
			codeLength += efAtc.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 25
			reverseOS.write(0xB9);
			codeLength += 1;
		}
		
		if (efCsspr != null) {
			codeLength += efCsspr.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 24
			reverseOS.write(0xB8);
			codeLength += 1;
		}
		
		if (efHrpdupp != null) {
			codeLength += efHrpdupp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 23
			reverseOS.write(0xB7);
			codeLength += 1;
		}
		
		if (efHrpdcap != null) {
			codeLength += efHrpdcap.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 22
			reverseOS.write(0xB6);
			codeLength += 1;
		}
		
		if (efMaxpuzl != null) {
			codeLength += efMaxpuzl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 21
			reverseOS.write(0xB5);
			codeLength += 1;
		}
		
		if (efPuzl != null) {
			codeLength += efPuzl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
			reverseOS.write(0xB4);
			codeLength += 1;
		}
		
		if (efSippapss != null) {
			codeLength += efSippapss.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
			reverseOS.write(0xB3);
			codeLength += 1;
		}
		
		if (efMipsp != null) {
			codeLength += efMipsp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 18
			reverseOS.write(0xB2);
			codeLength += 1;
		}
		
		if (efSipsp != null) {
			codeLength += efSipsp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
			reverseOS.write(0xB1);
			codeLength += 1;
		}
		
		if (efMipupp != null) {
			codeLength += efMipupp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
			reverseOS.write(0xB0);
			codeLength += 1;
		}
		
		if (efSipupp != null) {
			codeLength += efSipupp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
			reverseOS.write(0xAF);
			codeLength += 1;
		}
		
		if (efMipcap != null) {
			codeLength += efMipcap.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 14
			reverseOS.write(0xAE);
			codeLength += 1;
		}
		
		if (efSipcap != null) {
			codeLength += efSipcap.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
			reverseOS.write(0xAD);
			codeLength += 1;
		}
		
		if (ef3gpdopm != null) {
			codeLength += ef3gpdopm.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
			reverseOS.write(0xAC);
			codeLength += 1;
		}
		
		if (efMe3gpdopc != null) {
			codeLength += efMe3gpdopc.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			reverseOS.write(0xAB);
			codeLength += 1;
		}
		
		if (efEcc != null) {
			codeLength += efEcc.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
		}
		
		if (efMdn != null) {
			codeLength += efMdn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (efSpn != null) {
			codeLength += efSpn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			reverseOS.write(0xA8);
			codeLength += 1;
		}
		
		if (efSsfc != null) {
			codeLength += efSsfc.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		if (efSmss != null) {
			codeLength += efSmss.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			reverseOS.write(0xA6);
			codeLength += 1;
		}
		
		if (efSmsp != null) {
			codeLength += efSmsp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		if (efSms != null) {
			codeLength += efSms.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
		}
		
		if (efFdn != null) {
			codeLength += efFdn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (efSsci != null) {
			codeLength += efSsci.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		codeLength += templateID.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += optcsimHeader.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		if (totalLength == -1) {
			subCodeLength += berTag.decode(is);

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				optcsimHeader = new PEHeader();
				subCodeLength += optcsimHeader.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				templateID = new BerObjectIdentifier();
				subCodeLength += templateID.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				efSsci = new File();
				subCodeLength += efSsci.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
				efFdn = new File();
				subCodeLength += efFdn.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
				efSms = new File();
				subCodeLength += efSms.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
				efSmsp = new File();
				subCodeLength += efSmsp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
				efSmss = new File();
				subCodeLength += efSmss.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
				efSsfc = new File();
				subCodeLength += efSsfc.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
				efSpn = new File();
				subCodeLength += efSpn.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
				efMdn = new File();
				subCodeLength += efMdn.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
				efEcc = new File();
				subCodeLength += efEcc.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
				efMe3gpdopc = new File();
				subCodeLength += efMe3gpdopc.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
				ef3gpdopm = new File();
				subCodeLength += ef3gpdopm.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
				efSipcap = new File();
				subCodeLength += efSipcap.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 14)) {
				efMipcap = new File();
				subCodeLength += efMipcap.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
				efSipupp = new File();
				subCodeLength += efSipupp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
				efMipupp = new File();
				subCodeLength += efMipupp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
				efSipsp = new File();
				subCodeLength += efSipsp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 18)) {
				efMipsp = new File();
				subCodeLength += efMipsp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
				efSippapss = new File();
				subCodeLength += efSippapss.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
				efPuzl = new File();
				subCodeLength += efPuzl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
				efMaxpuzl = new File();
				subCodeLength += efMaxpuzl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 22)) {
				efHrpdcap = new File();
				subCodeLength += efHrpdcap.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 23)) {
				efHrpdupp = new File();
				subCodeLength += efHrpdupp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 24)) {
				efCsspr = new File();
				subCodeLength += efCsspr.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 25)) {
				efAtc = new File();
				subCodeLength += efAtc.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 26)) {
				efEprl = new File();
				subCodeLength += efEprl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 27)) {
				efBcsmscfg = new File();
				subCodeLength += efBcsmscfg.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 28)) {
				efBcsmspref = new File();
				subCodeLength += efBcsmspref.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 29)) {
				efBcsmstable = new File();
				subCodeLength += efBcsmstable.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 30)) {
				efBcsmsp = new File();
				subCodeLength += efBcsmsp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 31)) {
				efBakpara = new File();
				subCodeLength += efBakpara.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 32)) {
				efUpbakpara = new File();
				subCodeLength += efUpbakpara.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 33)) {
				efMmsn = new File();
				subCodeLength += efMmsn.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 34)) {
				efExt8 = new File();
				subCodeLength += efExt8.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
				efMmsicp = new File();
				subCodeLength += efMmsicp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
				efMmsup = new File();
				subCodeLength += efMmsup.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 37)) {
				efMmsucp = new File();
				subCodeLength += efMmsucp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 38)) {
				efAuthCapability = new File();
				subCodeLength += efAuthCapability.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 39)) {
				ef3gcik = new File();
				subCodeLength += ef3gcik.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 40)) {
				efDck = new File();
				subCodeLength += efDck.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 41)) {
				efGid1 = new File();
				subCodeLength += efGid1.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 42)) {
				efGid2 = new File();
				subCodeLength += efGid2.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 43)) {
				efCdmacnl = new File();
				subCodeLength += efCdmacnl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 44)) {
				efSfEuimid = new File();
				subCodeLength += efSfEuimid.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 45)) {
				efEst = new File();
				subCodeLength += efEst.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 46)) {
				efHiddenKey = new File();
				subCodeLength += efHiddenKey.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 47)) {
				efLcsver = new File();
				subCodeLength += efLcsver.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 48)) {
				efLcscp = new File();
				subCodeLength += efLcscp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 49)) {
				efSdn = new File();
				subCodeLength += efSdn.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 50)) {
				efExt2 = new File();
				subCodeLength += efExt2.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 51)) {
				efExt3 = new File();
				subCodeLength += efExt3.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 52)) {
				efIci = new File();
				subCodeLength += efIci.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 53)) {
				efOci = new File();
				subCodeLength += efOci.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 54)) {
				efExt5 = new File();
				subCodeLength += efExt5.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 55)) {
				efCcp2 = new File();
				subCodeLength += efCcp2.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 56)) {
				efApplabels = new File();
				subCodeLength += efApplabels.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 57)) {
				efModel = new File();
				subCodeLength += efModel.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 58)) {
				efRc = new File();
				subCodeLength += efRc.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 59)) {
				efSmscap = new File();
				subCodeLength += efSmscap.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 60)) {
				efMipflags = new File();
				subCodeLength += efMipflags.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 61)) {
				ef3gpduppext = new File();
				subCodeLength += ef3gpduppext.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 62)) {
				efIpv6cap = new File();
				subCodeLength += efIpv6cap.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 63)) {
				efTcpconfig = new File();
				subCodeLength += efTcpconfig.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 64)) {
				efDgc = new File();
				subCodeLength += efDgc.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 65)) {
				efWapbrowsercp = new File();
				subCodeLength += efWapbrowsercp.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 66)) {
				efWapbrowserbm = new File();
				subCodeLength += efWapbrowserbm.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 67)) {
				efMmsconfig = new File();
				subCodeLength += efMmsconfig.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 68)) {
				efJdl = new File();
				subCodeLength += efJdl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			int nextByte = is.read();
			if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			optcsimHeader = new PEHeader();
			subCodeLength += optcsimHeader.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			templateID = new BerObjectIdentifier();
			subCodeLength += templateID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			efSsci = new File();
			subCodeLength += efSsci.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			efFdn = new File();
			subCodeLength += efFdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			efSms = new File();
			subCodeLength += efSms.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			efSmsp = new File();
			subCodeLength += efSmsp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			efSmss = new File();
			subCodeLength += efSmss.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			efSsfc = new File();
			subCodeLength += efSsfc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			efSpn = new File();
			subCodeLength += efSpn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			efMdn = new File();
			subCodeLength += efMdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			efEcc = new File();
			subCodeLength += efEcc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			efMe3gpdopc = new File();
			subCodeLength += efMe3gpdopc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			ef3gpdopm = new File();
			subCodeLength += ef3gpdopm.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
			efSipcap = new File();
			subCodeLength += efSipcap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 14)) {
			efMipcap = new File();
			subCodeLength += efMipcap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
			efSipupp = new File();
			subCodeLength += efSipupp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
			efMipupp = new File();
			subCodeLength += efMipupp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
			efSipsp = new File();
			subCodeLength += efSipsp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 18)) {
			efMipsp = new File();
			subCodeLength += efMipsp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			efSippapss = new File();
			subCodeLength += efSippapss.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
			efPuzl = new File();
			subCodeLength += efPuzl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
			efMaxpuzl = new File();
			subCodeLength += efMaxpuzl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 22)) {
			efHrpdcap = new File();
			subCodeLength += efHrpdcap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 23)) {
			efHrpdupp = new File();
			subCodeLength += efHrpdupp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 24)) {
			efCsspr = new File();
			subCodeLength += efCsspr.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 25)) {
			efAtc = new File();
			subCodeLength += efAtc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 26)) {
			efEprl = new File();
			subCodeLength += efEprl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 27)) {
			efBcsmscfg = new File();
			subCodeLength += efBcsmscfg.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 28)) {
			efBcsmspref = new File();
			subCodeLength += efBcsmspref.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 29)) {
			efBcsmstable = new File();
			subCodeLength += efBcsmstable.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 30)) {
			efBcsmsp = new File();
			subCodeLength += efBcsmsp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 31)) {
			efBakpara = new File();
			subCodeLength += efBakpara.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 32)) {
			efUpbakpara = new File();
			subCodeLength += efUpbakpara.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 33)) {
			efMmsn = new File();
			subCodeLength += efMmsn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 34)) {
			efExt8 = new File();
			subCodeLength += efExt8.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
			efMmsicp = new File();
			subCodeLength += efMmsicp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
			efMmsup = new File();
			subCodeLength += efMmsup.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 37)) {
			efMmsucp = new File();
			subCodeLength += efMmsucp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 38)) {
			efAuthCapability = new File();
			subCodeLength += efAuthCapability.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 39)) {
			ef3gcik = new File();
			subCodeLength += ef3gcik.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 40)) {
			efDck = new File();
			subCodeLength += efDck.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 41)) {
			efGid1 = new File();
			subCodeLength += efGid1.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 42)) {
			efGid2 = new File();
			subCodeLength += efGid2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 43)) {
			efCdmacnl = new File();
			subCodeLength += efCdmacnl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 44)) {
			efSfEuimid = new File();
			subCodeLength += efSfEuimid.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 45)) {
			efEst = new File();
			subCodeLength += efEst.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 46)) {
			efHiddenKey = new File();
			subCodeLength += efHiddenKey.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 47)) {
			efLcsver = new File();
			subCodeLength += efLcsver.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 48)) {
			efLcscp = new File();
			subCodeLength += efLcscp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 49)) {
			efSdn = new File();
			subCodeLength += efSdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 50)) {
			efExt2 = new File();
			subCodeLength += efExt2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 51)) {
			efExt3 = new File();
			subCodeLength += efExt3.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 52)) {
			efIci = new File();
			subCodeLength += efIci.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 53)) {
			efOci = new File();
			subCodeLength += efOci.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 54)) {
			efExt5 = new File();
			subCodeLength += efExt5.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 55)) {
			efCcp2 = new File();
			subCodeLength += efCcp2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 56)) {
			efApplabels = new File();
			subCodeLength += efApplabels.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 57)) {
			efModel = new File();
			subCodeLength += efModel.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 58)) {
			efRc = new File();
			subCodeLength += efRc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 59)) {
			efSmscap = new File();
			subCodeLength += efSmscap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 60)) {
			efMipflags = new File();
			subCodeLength += efMipflags.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 61)) {
			ef3gpduppext = new File();
			subCodeLength += ef3gpduppext.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 62)) {
			efIpv6cap = new File();
			subCodeLength += efIpv6cap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 63)) {
			efTcpconfig = new File();
			subCodeLength += efTcpconfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 64)) {
			efDgc = new File();
			subCodeLength += efDgc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 65)) {
			efWapbrowsercp = new File();
			subCodeLength += efWapbrowsercp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 66)) {
			efWapbrowserbm = new File();
			subCodeLength += efWapbrowserbm.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 67)) {
			efMmsconfig = new File();
			subCodeLength += efMmsconfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 68)) {
			efJdl = new File();
			subCodeLength += efJdl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (optcsimHeader != null) {
			sb.append("optcsimHeader: ");
			optcsimHeader.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("optcsimHeader: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (templateID != null) {
			sb.append("templateID: ").append(templateID);
		}
		else {
			sb.append("templateID: <empty-required-field>");
		}
		
		if (efSsci != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSsci: ");
			efSsci.appendAsString(sb, indentLevel + 1);
		}
		
		if (efFdn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efFdn: ");
			efFdn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSms != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSms: ");
			efSms.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSmsp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSmsp: ");
			efSmsp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSmss != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSmss: ");
			efSmss.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSsfc != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSsfc: ");
			efSsfc.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSpn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSpn: ");
			efSpn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMdn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMdn: ");
			efMdn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEcc != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEcc: ");
			efEcc.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMe3gpdopc != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMe3gpdopc: ");
			efMe3gpdopc.appendAsString(sb, indentLevel + 1);
		}
		
		if (ef3gpdopm != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ef3gpdopm: ");
			ef3gpdopm.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSipcap != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSipcap: ");
			efSipcap.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMipcap != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMipcap: ");
			efMipcap.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSipupp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSipupp: ");
			efSipupp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMipupp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMipupp: ");
			efMipupp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSipsp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSipsp: ");
			efSipsp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMipsp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMipsp: ");
			efMipsp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSippapss != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSippapss: ");
			efSippapss.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPuzl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPuzl: ");
			efPuzl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMaxpuzl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMaxpuzl: ");
			efMaxpuzl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efHrpdcap != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efHrpdcap: ");
			efHrpdcap.appendAsString(sb, indentLevel + 1);
		}
		
		if (efHrpdupp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efHrpdupp: ");
			efHrpdupp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCsspr != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCsspr: ");
			efCsspr.appendAsString(sb, indentLevel + 1);
		}
		
		if (efAtc != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efAtc: ");
			efAtc.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEprl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEprl: ");
			efEprl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efBcsmscfg != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efBcsmscfg: ");
			efBcsmscfg.appendAsString(sb, indentLevel + 1);
		}
		
		if (efBcsmspref != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efBcsmspref: ");
			efBcsmspref.appendAsString(sb, indentLevel + 1);
		}
		
		if (efBcsmstable != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efBcsmstable: ");
			efBcsmstable.appendAsString(sb, indentLevel + 1);
		}
		
		if (efBcsmsp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efBcsmsp: ");
			efBcsmsp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efBakpara != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efBakpara: ");
			efBakpara.appendAsString(sb, indentLevel + 1);
		}
		
		if (efUpbakpara != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efUpbakpara: ");
			efUpbakpara.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmsn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmsn: ");
			efMmsn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt8 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt8: ");
			efExt8.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmsicp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmsicp: ");
			efMmsicp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmsup != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmsup: ");
			efMmsup.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmsucp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmsucp: ");
			efMmsucp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efAuthCapability != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efAuthCapability: ");
			efAuthCapability.appendAsString(sb, indentLevel + 1);
		}
		
		if (ef3gcik != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ef3gcik: ");
			ef3gcik.appendAsString(sb, indentLevel + 1);
		}
		
		if (efDck != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efDck: ");
			efDck.appendAsString(sb, indentLevel + 1);
		}
		
		if (efGid1 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efGid1: ");
			efGid1.appendAsString(sb, indentLevel + 1);
		}
		
		if (efGid2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efGid2: ");
			efGid2.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCdmacnl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCdmacnl: ");
			efCdmacnl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSfEuimid != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSfEuimid: ");
			efSfEuimid.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEst != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEst: ");
			efEst.appendAsString(sb, indentLevel + 1);
		}
		
		if (efHiddenKey != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efHiddenKey: ");
			efHiddenKey.appendAsString(sb, indentLevel + 1);
		}
		
		if (efLcsver != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efLcsver: ");
			efLcsver.appendAsString(sb, indentLevel + 1);
		}
		
		if (efLcscp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efLcscp: ");
			efLcscp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSdn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSdn: ");
			efSdn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt2: ");
			efExt2.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt3 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt3: ");
			efExt3.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIci != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIci: ");
			efIci.appendAsString(sb, indentLevel + 1);
		}
		
		if (efOci != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efOci: ");
			efOci.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt5 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt5: ");
			efExt5.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCcp2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCcp2: ");
			efCcp2.appendAsString(sb, indentLevel + 1);
		}
		
		if (efApplabels != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efApplabels: ");
			efApplabels.appendAsString(sb, indentLevel + 1);
		}
		
		if (efModel != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efModel: ");
			efModel.appendAsString(sb, indentLevel + 1);
		}
		
		if (efRc != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efRc: ");
			efRc.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSmscap != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSmscap: ");
			efSmscap.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMipflags != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMipflags: ");
			efMipflags.appendAsString(sb, indentLevel + 1);
		}
		
		if (ef3gpduppext != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ef3gpduppext: ");
			ef3gpduppext.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIpv6cap != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIpv6cap: ");
			efIpv6cap.appendAsString(sb, indentLevel + 1);
		}
		
		if (efTcpconfig != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efTcpconfig: ");
			efTcpconfig.appendAsString(sb, indentLevel + 1);
		}
		
		if (efDgc != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efDgc: ");
			efDgc.appendAsString(sb, indentLevel + 1);
		}
		
		if (efWapbrowsercp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efWapbrowsercp: ");
			efWapbrowsercp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efWapbrowserbm != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efWapbrowserbm: ");
			efWapbrowserbm.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmsconfig != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmsconfig: ");
			efMmsconfig.appendAsString(sb, indentLevel + 1);
		}
		
		if (efJdl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efJdl: ");
			efJdl.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

